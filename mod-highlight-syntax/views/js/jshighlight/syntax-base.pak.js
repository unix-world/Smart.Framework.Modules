
// # JS Package: syntax-base.pak.js :: #START# :: @ generated from mod-highlight-syntax/views/js/jshighlight/syntax/*.js
// Included Files: web/*.js ; tpl/*.js ; lnx/*.js ; srv/*.js ; net/*.js ; lang/*.js #

// ### DO NOT EDIT THIS FILE AS IT WILL BE OVERWRITTEN EACH TIME THE INCLUDED SCRIPTS WILL CHANGE !!! ###

// === web/css.js

/*
Language: CSS
Category: common, css
*/

// syntax/web/css.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('css',
function(hljs) {
	var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	var RULE = {
		begin: /[A-Z\_\.\-]+\s*:/, returnBegin: true, end: ';', endsWithParent: true,
		contains: [
			{
				className: 'attribute',
				begin: /\S/, end: ':', excludeEnd: true,
				starts: {
					endsWithParent: true, excludeEnd: true,
					contains: [
						{
							begin: /[\w-]+\(/, returnBegin: true,
							contains: [
								{
									className: 'built_in',
									begin: /[\w-]+/
								},
								{
									begin: /\(/, end: /\)/,
									contains: [
										hljs.APOS_STRING_MODE,
										hljs.QUOTE_STRING_MODE
									]
								}
							]
						},
						hljs.CSS_NUMBER_MODE,
						hljs.QUOTE_STRING_MODE,
						hljs.APOS_STRING_MODE,
						hljs.C_BLOCK_COMMENT_MODE,
						{
							className: 'number', begin: '#[0-9A-Fa-f]+'
						},
						{
							className: 'meta', begin: '!important'
						}
					]
				}
			}
		]
	};

	return {
		case_insensitive: true,
		illegal: /[=\/|'\$]/,
		contains: [
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'selector-id', begin: /#[A-Za-z0-9_-]+/
			},
			{
				className: 'selector-class', begin: /\.[A-Za-z0-9_-]+/
			},
			{
				className: 'selector-attr',
				begin: /\[/, end: /\]/,
				illegal: '$'
			},
			{
				className: 'selector-pseudo',
				begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/
			},
			{
				begin: '@(font-face|page)',
				lexemes: '[a-z-]+',
				keywords: 'font-face page'
			},
			{
				begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing
																 // because it doesn’t let it to be parsed as
																 // a rule set but instead drops parser into
																 // the default mode which is how it should be.
				illegal: /:/, // break on Less variables @var: ...
				contains: [
					{
						className: 'keyword',
						begin: /\w+/
					},
					{
						begin: /\s/, endsWithParent: true, excludeEnd: true,
						relevance: 0,
						contains: [
							hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,
							hljs.CSS_NUMBER_MODE
						]
					}
				]
			},
			{
				className: 'selector-tag', begin: IDENT_RE,
				relevance: 0
			},
			{
				begin: '{', end: '}',
				illegal: /\S/,
				contains: [
					hljs.C_BLOCK_COMMENT_MODE,
					RULE,
				]
			}
		]
	};
}
);

// #END

// === web/diff.js

/*
Language: Diff
Description: Unified and context diff
Author: Vasily Polovnyov <vast@whiteants.net>
Category: common
*/

// syntax/web/diff.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('diff',
function(hljs) {
	return {
		aliases: ['patch'],
		contains: [
			{
				className: 'meta',
				relevance: 10,
				variants: [
					{begin: /^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},
					{begin: /^\*\*\* +\d+,\d+ +\*\*\*\*$/},
					{begin: /^\-\-\- +\d+,\d+ +\-\-\-\-$/}
				]
			},
			{
				className: 'comment',
				variants: [
					{begin: /Index: /, end: /$/},
					{begin: /={3,}/, end: /$/},
					{begin: /^\-{3}/, end: /$/},
					{begin: /^\*{3} /, end: /$/},
					{begin: /^\+{3}/, end: /$/},
					{begin: /\*{5}/, end: /\*{5}$/}
				]
			},
			{
				className: 'addition',
				begin: '^\\+', end: '$'
			},
			{
				className: 'deletion',
				begin: '^\\-', end: '$'
			},
			{
				className: 'addition',
				begin: '^\\!', end: '$'
			}
		]
	};
}
);

// #END

// === web/ini.js

/*
Language: Ini, TOML
Contributors: Guillaume Gomez <guillaume1.gomez@gmail.com>
Category: common, config
*/

// syntax/web/ini.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('ini',
function(hljs) {
	var STRING = {
		className: "string",
		contains: [hljs.BACKSLASH_ESCAPE],
		variants: [
			{
				begin: "'''", end: "'''",
				relevance: 10
			}, {
				begin: '"""', end: '"""',
				relevance: 10
			}, {
				begin: '"', end: '"'
			}, {
				begin: "'", end: "'"
			}
		]
	};
	return {
		aliases: ['toml'],
		case_insensitive: true,
		illegal: /\S/,
		contains: [
			hljs.COMMENT(';', '$'),
			hljs.HASH_COMMENT_MODE,
			{
				className: 'section',
				begin: /^\s*\[+/, end: /\]+/
			},
			{
				begin: /^[a-z0-9\[\]_-]+\s*=\s*/, end: '$',
				returnBegin: true,
				contains: [
					{
						className: 'attr',
						begin: /[a-z0-9\[\]_-]+/
					},
					{
						begin: /=/, endsWithParent: true,
						relevance: 0,
						contains: [
							{
								className: 'literal',
								begin: /\bon|off|true|false|yes|no\b/
							},
							{
								className: 'variable',
								variants: [
									{begin: /\$[\w\d"][\w\d_]*/},
									{begin: /\$\{(.*?)}/}
								]
							},
							STRING,
							{
								className: 'number',
								begin: /([\+\-]+)?[\d]+_[\d_]+/
							},
							hljs.NUMBER_MODE
						]
					}
				]
			}
		]
	};
}
);

// #END

// === web/javascript.js

/*
Language: JavaScript
Category: common, scripting
*/

// syntax/web/javascript.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('javascript',
function(hljs) {
	var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	var KEYWORDS = {
		keyword:
			'in of if for while finally var new function do return void else break catch ' +
			'instanceof with throw case default try this switch continue typeof delete ' +
			'let yield const export super debugger as async await static ' +
			// ECMAScript 6 modules import
			'import from as'
		,
		literal:
			'true false null undefined NaN Infinity',
		built_in:
			'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
			'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
			'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
			'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
			'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
			'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
			'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
			'Promise'
	};
	var EXPRESSIONS;
	var NUMBER = {
		className: 'number',
		variants: [
			{ begin: '\\b(0[bB][01]+)' },
			{ begin: '\\b(0[oO][0-7]+)' },
			{ begin: hljs.C_NUMBER_RE }
		],
		relevance: 0
	};
	var SUBST = {
		className: 'subst',
		begin: '\\$\\{', end: '\\}',
		keywords: KEYWORDS,
		contains: []  // defined later
	};
	var TEMPLATE_STRING = {
		className: 'string',
		begin: '`', end: '`',
		contains: [
			hljs.BACKSLASH_ESCAPE,
			SUBST
		]
	};
	SUBST.contains = [
		hljs.APOS_STRING_MODE,
		hljs.QUOTE_STRING_MODE,
		TEMPLATE_STRING,
		NUMBER,
		hljs.REGEXP_MODE
	]
	var PARAMS_CONTAINS = SUBST.contains.concat([
		hljs.C_BLOCK_COMMENT_MODE,
		hljs.C_LINE_COMMENT_MODE
	]);

	return {
		aliases: ['js', 'jsx'],
		keywords: KEYWORDS,
		contains: [
			{
				className: 'meta',
				relevance: 10,
				begin: /^\s*['"]use (strict|asm)['"]/
			},
			{
				className: 'meta',
				begin: /^#!/, end: /$/
			},
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE,
			TEMPLATE_STRING,
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			NUMBER,
			{ // object attr container
				begin: /[{,]\s*/, relevance: 0,
				contains: [
					{
						begin: IDENT_RE + '\\s*:', returnBegin: true,
						relevance: 0,
						contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]
					}
				]
			},
			{ // "value" container
				begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
				keywords: 'return throw case',
				contains: [
					hljs.C_LINE_COMMENT_MODE,
					hljs.C_BLOCK_COMMENT_MODE,
					hljs.REGEXP_MODE,
					{
						className: 'function',
						begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>', returnBegin: true,
						end: '\\s*=>',
						contains: [
							{
								className: 'params',
								variants: [
									{
										begin: IDENT_RE
									},
									{
										begin: /\(\s*\)/,
									},
									{
										begin: /\(/, end: /\)/,
										excludeBegin: true, excludeEnd: true,
										keywords: KEYWORDS,
										contains: PARAMS_CONTAINS
									}
								]
							}
						]
					},
					{ // E4X / JSX
						begin: /</, end: /(\/\w+|\w+\/)>/,
						subLanguage: 'xml',
						contains: [
							{begin: /<\w+\s*\/>/, skip: true},
							{
								begin: /<\w+/, end: /(\/\w+|\w+\/)>/, skip: true,
								contains: [
									{begin: /<\w+\s*\/>/, skip: true},
									'self'
								]
							}
						]
					}
				],
				relevance: 0
			},
			{
				className: 'function',
				beginKeywords: 'function', end: /\{/, excludeEnd: true,
				contains: [
					hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),
					{
						className: 'params',
						begin: /\(/, end: /\)/,
						excludeBegin: true,
						excludeEnd: true,
						contains: PARAMS_CONTAINS
					}
				],
				illegal: /\[|%/
			},
			{
				begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
			},
			hljs.METHOD_GUARD,
			{ // ES6 class
				className: 'class',
				beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,
				illegal: /[:"\[\]]/,
				contains: [
					{beginKeywords: 'extends'},
					hljs.UNDERSCORE_TITLE_MODE
				]
			},
			{
				beginKeywords: 'constructor', end: /\{/, excludeEnd: true
			}
		],
		illegal: /#(?!!)/
	};
}
);

// #END

// === web/json.js

/*
Language: JSON
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: common, protocols
*/

// syntax/web/json.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('json',
function(hljs) {
	var LITERALS = {literal: 'true false null'};
	var TYPES = [
		hljs.QUOTE_STRING_MODE,
		hljs.C_NUMBER_MODE
	];
	var VALUE_CONTAINER = {
		end: ',', endsWithParent: true, excludeEnd: true,
		contains: TYPES,
		keywords: LITERALS
	};
	var OBJECT = {
		begin: '{', end: '}',
		contains: [
			{
				className: 'attr',
				begin: /"/, end: /"/,
				contains: [hljs.BACKSLASH_ESCAPE],
				illegal: '\\n',
			},
			hljs.inherit(VALUE_CONTAINER, {begin: /:/})
		],
		illegal: '\\S'
	};
	var ARRAY = {
		begin: '\\[', end: '\\]',
		contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
		illegal: '\\S'
	};
	TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);
	return {
		contains: TYPES,
		keywords: LITERALS,
		illegal: '\\S'
	};
}
);

// #END

// === web/less.js

/*
Language: Less
Author:   Max Mikhailov <seven.phases.max@gmail.com>
Category: css
*/

// syntax/web/less.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('less',
function(hljs) {
	var IDENT_RE        = '[\\w-]+'; // yes, Less identifiers may begin with a digit
	var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';

	/* Generic Modes */

	var RULES = [], VALUE = []; // forward def. for recursive modes

	var STRING_MODE = function(c) { return {
		// Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
		className: 'string', begin: '~?' + c + '.*?' + c
	};};

	var IDENT_MODE = function(name, begin, relevance) { return {
		className: name, begin: begin, relevance: relevance
	};};

	var PARENS_MODE = {
		// used only to properly balance nested parens inside mixin call, def. arg list
		begin: '\\(', end: '\\)', contains: VALUE, relevance: 0
	};

	// generic Less highlighter (used almost everywhere except selectors):
	VALUE.push(
		hljs.C_LINE_COMMENT_MODE,
		hljs.C_BLOCK_COMMENT_MODE,
		STRING_MODE("'"),
		STRING_MODE('"'),
		hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
		{
			begin: '(url|data-uri)\\(',
			starts: {className: 'string', end: '[\\)\\n]', excludeEnd: true}
		},
		IDENT_MODE('number', '#[0-9A-Fa-f]+\\b'),
		PARENS_MODE,
		IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
		IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),
		IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
		{ // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
			className: 'attribute', begin: IDENT_RE + '\\s*:', end: ':', returnBegin: true, excludeEnd: true
		},
		{
			className: 'meta',
			begin: '!important'
		}
	);

	var VALUE_WITH_RULESETS = VALUE.concat({
		begin: '{', end: '}', contains: RULES
	});

	var MIXIN_GUARD_MODE = {
		beginKeywords: 'when', endsWithParent: true,
		contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match
	};

	/* Rule-Level Modes */

	var RULE_MODE = {
		begin: INTERP_IDENT_RE + '\\s*:', returnBegin: true, end: '[;}]',
		relevance: 0,
		contains: [
			{
				className: 'attribute',
				begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,
				starts: {
					endsWithParent: true, illegal: '[<=$]',
					relevance: 0,
					contains: VALUE
				}
			}
		]
	};

	var AT_RULE_MODE = {
		className: 'keyword',
		begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
		starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}
	};

	// variable definitions and calls
	var VAR_RULE_MODE = {
		className: 'variable',
		variants: [
			// using more strict pattern for higher relevance to increase chances of Less detection.
			// this is *the only* Less specific statement used in most of the sources, so...
			// (we’ll still often loose to the css-parser unless there's '//' comment,
			// simply because 1 variable just can't beat 99 properties :)
			{begin: '@' + IDENT_RE + '\\s*:', relevance: 15},
			{begin: '@' + IDENT_RE}
		],
		starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}
	};

	var SELECTOR_MODE = {
		// first parse unambiguous selectors (i.e. those not starting with tag)
		// then fall into the scary lookahead-discriminator variant.
		// this mode also handles mixin definitions and calls
		variants: [{
			begin: '[\\.#:&\\[>]', end: '[;{}]'  // mixin calls end with ';'
			}, {
			begin: INTERP_IDENT_RE, end: '{'
		}],
		returnBegin: true,
		returnEnd:   true,
		illegal: '[<=\'$"]',
		relevance: 0,
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			MIXIN_GUARD_MODE,
			IDENT_MODE('keyword',  'all\\b'),
			IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag
			IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes "tags"
			IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
			IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
			IDENT_MODE('selector-tag',  '&', 0),
			{className: 'selector-attr', begin: '\\[', end: '\\]'},
			{className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},
			{begin: '\\(', end: '\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins
			{begin: '!important'} // eat !important after mixin call or it will be colored as tag
		]
	};

	RULES.push(
		hljs.C_LINE_COMMENT_MODE,
		hljs.C_BLOCK_COMMENT_MODE,
		AT_RULE_MODE,
		VAR_RULE_MODE,
		RULE_MODE,
		SELECTOR_MODE
	);

	return {
		case_insensitive: true,
		illegal: '[=>\'/<($"]',
		contains: RULES
	};
}
);

// #END

// === web/markdown.js

/*
Language: Markdown
Requires: xml.js
Author: John Crepezzi <john.crepezzi@gmail.com>
Website: http://seejohncode.com/
Category: common, markup
*/

// syntax/web/markdown.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('markdown',
function(hljs) {
	return {
		aliases: ['md', 'mkdown', 'mkd'],
		contains: [
			// highlight headers
			{
				className: 'section',
				variants: [
					{ begin: '^#{1,6}', end: '$' },
					{ begin: '^.+?\\n[=-]{2,}$' }
				]
			},
			// inline html
			{
				begin: '<', end: '>',
				subLanguage: 'xml',
				relevance: 0
			},
			// lists (indicators only)
			{
				className: 'bullet',
				begin: '^([*+-]|(\\d+\\.))\\s+'
			},
			// strong segments
			{
				className: 'strong',
				begin: '[*_]{2}.+?[*_]{2}'
			},
			// emphasis segments
			{
				className: 'emphasis',
				variants: [
					{ begin: '\\*.+?\\*' },
					{ begin: '_.+?_'
					, relevance: 0
					}
				]
			},
			// blockquotes
			{
				className: 'quote',
				begin: '^>\\s+', end: '$'
			},
			// code snippets
			{
				className: 'code',
				variants: [
					{
						begin: '^```\w*\s*$', end: '^```\s*$'
					},
					{
						begin: '`.+?`'
					},
					{
						begin: '^( {4}|\t)', end: '$',
						relevance: 0
					}
				]
			},
			// horizontal rules
			{
				begin: '^[-\\*]{3,}', end: '$'
			},
			// using links - title and link
			{
				begin: '\\[.+?\\][\\(\\[].*?[\\)\\]]',
				returnBegin: true,
				contains: [
					{
						className: 'string',
						begin: '\\[', end: '\\]',
						excludeBegin: true,
						returnEnd: true,
						relevance: 0
					},
					{
						className: 'link',
						begin: '\\]\\(', end: '\\)',
						excludeBegin: true, excludeEnd: true
					},
					{
						className: 'symbol',
						begin: '\\]\\[', end: '\\]',
						excludeBegin: true, excludeEnd: true
					}
				],
				relevance: 10
			},
			{
				begin: /^\[[^\n]+\]:/,
				returnBegin: true,
				contains: [
					{
						className: 'symbol',
						begin: /\[/, end: /\]/,
						excludeBegin: true, excludeEnd: true
					},
					{
						className: 'link',
						begin: /:\s*/, end: /$/,
						excludeBegin: true
					}
				]
			}
		]
	};
}
);

// #END

// === web/pgsql.js

/*
Language: PostgreSQL SQL dialect and PL/pgSQL
Author: Egor Rogov (e.rogov@postgrespro.ru)
Description:
		This language incorporates both PostgreSQL SQL dialect and PL/pgSQL language.
		It is based on PostgreSQL version 11. Some notes:
		- Text in double-dollar-strings is _always_ interpreted as some programming code. Text
			in ordinary quotes is _never_ interpreted that way and highlighted just as a string.
		- There are quite a bit "special cases". That's because many keywords are not strictly
			they are keywords in some contexts and ordinary identifiers in others. Only some
			of such cases are handled; you still can get some of your identifiers highlighted
			wrong way.
		- Function names deliberately are not highlighted. There is no way to tell function
			call from other constructs, hence we can't highlight _all_ function names. And
			some names highlighted while others not looks ugly.
### modified by unixman: contains some fixes
*/

// syntax/web/pgsql.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('pgsql',
function(hljs) {
	var COMMENT_MODE = hljs.COMMENT('--', '$');
	var UNQUOTED_IDENT = '[a-zA-Z_][a-zA-Z_0-9$]*';
	var DOLLAR_STRING = '\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$';
	var LABEL = '<<\\s*' + UNQUOTED_IDENT + '\\s*>>';

	var SQL_KW =
		// https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
		// https://www.postgresql.org/docs/11/static/sql-commands.html
		// SQL commands (starting words)
		'ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE ' +
		'DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY ' +
		'PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW ' +
		'START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES ' +
		// SQL commands (others)
		'AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN ' +
		'WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS ' +
		'FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM ' +
		'TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS ' +
		'METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION ' +
		'INDEX PROCEDURE ASSERTION ' +
		// additional reserved key words
		'ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK ' +
		'COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS ' +
		'DEFERRABLE RANGE ' +
		'DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ' +
		'ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT ' +
		'NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY ' +
		'REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN ' +
		'TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH ' +
		// some of non-reserved (which are used in clauses or as PL/pgSQL keyword)
		'BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN ' +
		'BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT ' +
		'TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN ' +
		'EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH ' +
		'REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ' +
		'ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED ' +
		'INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 ' +
		'INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ' +
		'ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES ' +
		'RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS ' +
		'UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF ' +
		// some parameters of VACUUM/ANALYZE/EXPLAIN
		'FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING ' +
		//
		'RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED ' +
		'OF NOTHING NONE EXCLUDE ATTRIBUTE ' +
		// from GRANT (not keywords actually)
		'USAGE ROUTINES ' +
		// actually literals, but look better this way (due to IS TRUE, IS FALSE, ISNULL etc)
		'TRUE FALSE NAN INFINITY ';

	var ROLE_ATTRS = // only those not in keywrods already
		'SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT ' +
		'LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ';

	var PLPGSQL_KW =
		'ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS ' +
		'STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT ' +
		'OPEN ';

	var TYPES =
		// https://www.postgresql.org/docs/11/static/datatype.html
		'BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR ' +
		'CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 ' +
		'MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 ' +
		'SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 ' +
		'TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR ' +
		'INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ' +
		// fix by unixman
		'PLPGSQL ' +
		// pseudotypes
		'ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL ' +
		'RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR ' +
		// spec. type
		'NAME ' +
		// OID-types
		'OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 ' +
		'REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ';// +
		// some types from standard extensions
		'HSTORE|10 LO LTREE|10 ';

	var TYPES_RE =
		TYPES.trim()
				 .split(' ')
				 .map( function(val) { return val.split('|')[0]; } )
				 .join('|');

	var SQL_BI =
		'CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP ' +
		'CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ';

	var PLPGSQL_BI =
		'FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 ' +
		'TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ' +
		// get diagnostics
		'ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME ' +
		'PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 ' +
		'PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ';

	var PLPGSQL_EXCEPTIONS =
		// exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
		'SQLSTATE SQLERRM|10 ' +
		'SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING ' +
		'NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED ' +
		'STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED ' +
		'SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE ' +
		'SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION ' +
		'TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED ' +
		'INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR ' +
		'INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION ' +
		'STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION ' +
		'DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW ' +
		'DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW ' +
		'INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION ' +
		'INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION ' +
		'INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST ' +
		'INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE ' +
		'NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE ' +
		'INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE ' +
		'INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT ' +
		'INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH ' +
		'NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE ' +
		'SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION ' +
		'SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING ' +
		'FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION ' +
		'BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT ' +
		'INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION ' +
		'INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION ' +
		'UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE ' +
		'INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE ' +
		'HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION ' +
		'INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION ' +
		'NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION ' +
		'SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION ' +
		'IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME ' +
		'TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD ' +
		'DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST ' +
		'INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT ' +
		'MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED ' +
		'READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION ' +
		'CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED ' +
		'PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED ' +
		'EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED ' +
		'TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED ' +
		'SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME ' +
		'INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION ' +
		'SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED ' +
		'SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE ' +
		'GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME ' +
		'NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH ' +
		'INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN ' +
		'UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT ' +
		'DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION ' +
		'DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS ' +
		'DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS ' +
		'INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION ' +
		'INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION ' +
		'INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION ' +
		'INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL ' +
		'OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED ' +
		'STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE ' +
		'OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION ' +
		'QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED ' +
		'SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR ' +
		'LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED ' +
		'FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION ' +
		'FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER ' +
		'FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS ' +
		'FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX ' +
		'FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH ' +
		'FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES ' +
		'FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE ' +
		'FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION ' +
		'FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR ' +
		'RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED ' +
		'INDEX_CORRUPTED ';

	var FUNCTIONS =
		// https://www.postgresql.org/docs/11/static/functions-aggregate.html
		'ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG ' +
		'JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG ' +
		'CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE ' +
		'REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP ' +
		'PERCENTILE_CONT PERCENTILE_DISC ' +
		// https://www.postgresql.org/docs/11/static/functions-window.html
		'ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE ' +
		// https://www.postgresql.org/docs/11/static/functions-comparison.html
		'NUM_NONNULLS NUM_NULLS ' +
		// https://www.postgresql.org/docs/11/static/functions-math.html
		'ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT ' +
		'TRUNC WIDTH_BUCKET ' +
		'RANDOM SETSEED ' +
		'ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND ' +
		// https://www.postgresql.org/docs/11/static/functions-string.html
		'BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ' +
		'ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP' +
		'LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 ' +
		'QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY ' +
		'REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR ' +
		'TO_ASCII TO_HEX TRANSLATE ' +
		// https://www.postgresql.org/docs/11/static/functions-binarystring.html
		'OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE ' +
		// https://www.postgresql.org/docs/11/static/functions-formatting.html
		'TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP ' +
		// https://www.postgresql.org/docs/11/static/functions-datetime.html
		'AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL ' +
		'MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 ' +
		'TIMEOFDAY TRANSACTION_TIMESTAMP|10 ' +
		// https://www.postgresql.org/docs/11/static/functions-enum.html
		'ENUM_FIRST ENUM_LAST ENUM_RANGE ' +
		// https://www.postgresql.org/docs/11/static/functions-geometry.html
		'AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH ' +
		'BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ' +
		// https://www.postgresql.org/docs/11/static/functions-net.html
		'ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY' +
		'INET_MERGE MACADDR8_SET7BIT ' +
		// https://www.postgresql.org/docs/11/static/functions-textsearch.html
		'ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY ' +
		'QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE ' +
		'TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY ' +
		'TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN ' +
		// https://www.postgresql.org/docs/11/static/functions-xml.html
		'XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT ' +
		'XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT ' +
		'XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES ' +
		'TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA ' +
		'QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA ' +
		'CURSOR_TO_XML CURSOR_TO_XMLSCHEMA ' +
		'SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA ' +
		'DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA ' +
		'XMLATTRIBUTES ' +
		// https://www.postgresql.org/docs/11/static/functions-json.html
		'TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT ' +
		'JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH ' +
		'JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH ' +
		'JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET ' +
		'JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT ' +
		'JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET ' +
		'JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY ' +
		// https://www.postgresql.org/docs/11/static/functions-sequence.html
		'CURRVAL LASTVAL NEXTVAL SETVAL ' +
		// https://www.postgresql.org/docs/11/static/functions-conditional.html
		'COALESCE NULLIF GREATEST LEAST ' +
		// https://www.postgresql.org/docs/11/static/functions-array.html
		'ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ' +
		'ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY ' +
		'STRING_TO_ARRAY UNNEST ' +
		// https://www.postgresql.org/docs/11/static/functions-range.html
		'ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE ' +
		// https://www.postgresql.org/docs/11/static/functions-srf.html
		'GENERATE_SERIES GENERATE_SUBSCRIPTS ' +
		// https://www.postgresql.org/docs/11/static/functions-info.html
		'CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT ' +
		'INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE ' +
		'TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE ' +
		'COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION ' +
		'TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX ' +
		'TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS ' +
		// https://www.postgresql.org/docs/11/static/functions-admin.html
		'CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE ' +
		'GIN_CLEAN_PENDING_LIST ' +
		// https://www.postgresql.org/docs/11/static/functions-trigger.html
		'SUPPRESS_REDUNDANT_UPDATES_TRIGGER ' +
		// ihttps://www.postgresql.org/docs/devel/static/lo-funcs.html
		'LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE ' +
		//
		'GROUPING CAST ';

		var FUNCTIONS_RE =
			FUNCTIONS.trim()
							 .split(' ')
							 .map( function(val) { return val.split('|')[0]; } )
							 .join('|');

		return {
				aliases: ['postgres','postgresql'],
				case_insensitive: true,
				keywords: {
					keyword:
						SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
					built_in:
						SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS,
				},
				// Forbid some cunstructs from other languages to improve autodetect. In fact
				// "[a-z]:" is legal (as part of array slice), but improbabal.
				illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|{{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
				contains: [
					// special handling of some words, which are reserved only in some contexts
					{
						className: 'keyword',
						variants: [
							{ begin: /\bTEXT\s*SEARCH\b/ },
							{ begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
							{ begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
							{ begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
							{ begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
							{ begin: /\bNULLS\s+(FIRST|LAST)\b/ },
							{ begin: /\bEVENT\s+TRIGGER\b/ },
							{ begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
							{ begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
							{ begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
							{ begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
							{ begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
							{ begin: /\bPRESERVE\s+ROWS\b/ },
							{ begin: /\bDISCARD\s+PLANS\b/ },
							{ begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
							{ begin: /\bSKIP\s+LOCKED\b/ },
							{ begin: /\bGROUPING\s+SETS\b/ },
							{ begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
							{ begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
							{ begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
							{ begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
							{ begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
							{ begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
							{ begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
							{ begin: /\bSECURITY\s+LABEL\b/ },
							{ begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
							{ begin: /\bWITH\s+(NO\s+)?DATA\b/ },
							{ begin: /\b(FOREIGN|SET)\s+DATA\b/ },
							{ begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
							{ begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
							{ begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
							{ begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
							{ begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
							{ begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
							{ begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
							{ begin: /\bAT\s+TIME\s+ZONE\b/ },
							{ begin: /\bGRANTED\s+BY\b/ },
							{ begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
							{ begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
							{ begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
							{ begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
							{ begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
						]
					},
					// functions named as keywords, followed by '('
					{
						begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/,
						//keywords: { built_in: 'FORMAT FAMILY VERSION' }
					},
					// INCLUDE ( ... ) in index_parameters in CREATE TABLE
					{
						begin: /\bINCLUDE\s*\(/,
						keywords: 'INCLUDE'
					},
					// not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
					{
						begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/
					},
					// disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
					// and in PL/pgSQL RAISE ... USING
					{
						begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/
					},
					// PG_smth; HAS_some_PRIVILEGE
					{
						//className: 'built_in',
						begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
						relevance: 10
					},
					// extract
					{
						begin: /\bEXTRACT\s*\(/,
						end: /\bFROM\b/,
						returnEnd: true,
						keywords: {
							//built_in: 'EXTRACT',
							type:     'CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS ' +
												'MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR ' +
												'TIMEZONE_MINUTE WEEK YEAR'
						}
					},
					// xmlelement, xmlpi - special NAME
					{
						begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
						keywords: {
							//built_in: 'XMLELEMENT XMLPI',
							keyword:  'NAME'
						}
					},
					// xmlparse, xmlserialize
					{
						begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
						keywords: {
							//built_in: 'XMLPARSE XMLSERIALIZE',
							keyword:  'DOCUMENT CONTENT'
						}
					},
					// Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
					// nearest following numeric constant. Without with trick we find a lot of "keywords"
					// in 'avrasm' autodetection test...
					{
						beginKeywords: 'CACHE INCREMENT MAXVALUE MINVALUE',
						end: hljs.C_NUMBER_RE,
						returnEnd: true,
						keywords: 'BY CACHE INCREMENT MAXVALUE MINVALUE'
					},
					// WITH|WITHOUT TIME ZONE as part of datatype
					{
						className: 'type',
						begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
					},
					// INTERVAL optional fields
					{
						className: 'type',
						begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
					},
					// Pseudo-types which allowed only as return type
					{
						begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
						keywords: {
							keyword: 'RETURNS',
							type: 'LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER'
						}
					},
					// Known functions - only when followed by '('
					{
						begin: '\\b(' + FUNCTIONS_RE + ')\\s*\\('
						//keywords: { built_in: FUNCTIONS }
					},
					// Types
					{
						begin: '\\.(' + TYPES_RE + ')\\b' // prevent highlight as type, say, 'oid' in 'pgclass.oid'
					},
					{
						begin: '\\b(' + TYPES_RE + ')\\s+PATH\\b', // in XMLTABLE
						keywords: {
							keyword: 'PATH', // hopefully no one would use PATH type in XMLTABLE...
							type: TYPES.replace('PATH ','')
						}
					},
					{
						className: 'type',
						begin: '\\b(' + TYPES_RE + ')\\b'
					},
					// Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
					{
						className: 'string',
						begin: '\'', end: '\'',
						contains: [{begin: '\'\''}]
					},
					{
						className: 'string',
						begin: '(e|E|u&|U&)\'', end: '\'',
						contains: [{begin: '\\\\.'}],
						relevance: 10
					},
					{
						begin: DOLLAR_STRING,
						endSameAsBegin: true,
						contains: [
							{
								// actually we want them all except SQL; listed are those with known implementations
								// and XML + JSON just in case
								//subLanguage: ['pgsql','perl','python','tcl','r','lua','java','php','ruby','bash','scheme','xml','json'], // Fix by Unixman
								subLanguage: ['pgsql','perl','python','tcl','lua','php','bash','xml','json'],
								endsWithParent: true
							}
						]
					},
					// identifiers in quotes
					{
						className: 'string',
						begin: '"', end: '"',
						contains: [{begin: '""'}]
					},
					// numbers
					hljs.C_NUMBER_MODE,
					// comments
					hljs.C_BLOCK_COMMENT_MODE,
					COMMENT_MODE,
					// PL/pgSQL staff
					// %ROWTYPE, %TYPE, $n
					{
						className: 'meta',
						variants: [
							{begin: '%(ROW)?TYPE', relevance: 10}, // %TYPE, %ROWTYPE
							{begin: '\\$\\d+'},                    // $n
							{begin: '^#\\w', end: '$'}             // #compiler option
						]
					},
					// <<labeles>>
					{
						className: 'symbol',
						begin: LABEL,
						relevance: 10
					}
				]
	};
}
);

// #END

// === web/php.js

/*
Language: PHP
Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: common
### modified by unixman: fix to better parse PHP code # r.20210603
*/

// syntax/web/php.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('php',
function(hljs) {
	var VARIABLE = {
		//begin: '\\$+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*' // Fix By Unixman
		begin: '\\$+[a-zA-Z_]+[a-zA-Z0-9_]*'
	};
	var PREPROCESSOR = {
		className: 'meta', begin: /<\?(php)?|\?>/
	};
	var STRING = {
		className: 'string',
		contains: [hljs.BACKSLASH_ESCAPE, PREPROCESSOR],
		variants: [
			{
				begin: 'b"', end: '"'
			},
			{
				begin: 'b\'', end: '\''
			},
			hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
			hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
		]
	};
	var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};
	return {
		aliases: ['php', 'php3', 'php4', 'php5', 'php6', 'php7', 'php8'],
		case_insensitive: true,
		keywords:
			'include_once include require_once require ' +
			'and or xor list echo as ' +
			'switch case break endswitch if elseif else for foreach endforeach while endwhile do ' +
			'exit die empty isset try catch throw exception ' +
			'return print eval default ' +
			'enddeclare continue endfor endif declare unset ' +
			'goto insteadof yield finally ' +
			'class interface trait instanceof ' +
			'boolean bool int float binary string array object ' +
			'use abstract static private protected public final global var const self parent new clone ' +
			'true false null ' + // these are literal !
			'__DIR__ __FILE__ __LINE__ __NAMESPACE__ __CLASS__ __METHOD__ __FUNCTION__', // these are special literal !
		contains: [
			hljs.HASH_COMMENT_MODE,
			hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),
			hljs.COMMENT(
				'/\\*',
				'\\*/',
				{
					contains: [
						{
							className: 'doctag',
							begin: '@[A-Za-z]+'
						}
					]
				}
			),
			hljs.COMMENT(
				'__halt_compiler.+?;',
				false,
				{
					endsWithParent: true,
					keywords: '__halt_compiler',
					lexemes: hljs.UNDERSCORE_IDENT_RE
				}
			),
			{
				className: 'string',
				begin: /<<<['"]?\w+['"]?$/, end: /^\w+;?$/,
				contains: [
					hljs.BACKSLASH_ESCAPE,
					{
						className: 'subst',
						variants: [
							{begin: /\$\w+/},
							{begin: /\{\$/, end: /\}/}
						]
					}
				]
			},
			PREPROCESSOR,
			{
			//	className: 'keyword', begin: /\$this\b/ // Fix By Unixman
				className: 'variable', begin: /\$[a-zA-Z0-9_]+\b/
			},
			VARIABLE,
			{
				// swallow composed identifiers to avoid parsing them as keywords
				begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
			},
			{
				className: 'function',
				beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
				illegal: '\\$|\\[|%',
				contains: [
					hljs.UNDERSCORE_TITLE_MODE,
					{
						className: 'params',
						begin: '\\(', end: '\\)',
						contains: [
							'self',
							VARIABLE,
							hljs.C_BLOCK_COMMENT_MODE,
							STRING,
							NUMBER
						]
					}
				]
			},
			{
				className: 'class',
				beginKeywords: 'class interface trait', end: '{', excludeEnd: true,
				illegal: /[:\(\$"]/,
				contains: [
					{beginKeywords: 'extends implements'},
					hljs.UNDERSCORE_TITLE_MODE
				]
			},
			{
				className: 'operator',
				begin: /\buse|abstract|static|private|protected|public|final|global|var|const|self|parent|new|clone\b/
			},
			{
				className: 'literal',
				begin: /\btrue|false|null|__DIR__|__FILE__|__LINE__|__NAMESPACE__|__CLASS__|__METHOD__|__FUNCTION__\b/
			},
			{
				beginKeywords: 'namespace', end: ';',
				illegal: /[\.']/,
				contains: [hljs.UNDERSCORE_TITLE_MODE]
			},
			{
				beginKeywords: 'use', end: ';',
				contains: [hljs.UNDERSCORE_TITLE_MODE]
			},
			{
				begin: '=>' // No markup, just a relevance booster
			},
			STRING,
			NUMBER
		]
	};
}
);

// #END

// === web/scss.js

/*
Language: SCSS
Author: Kurt Emch <kurt@kurtemch.com>
Category: css
*/

// syntax/web/scss.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('scss',
function(hljs) {
	var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	var VARIABLE = {
		className: 'variable',
		begin: '(\\$' + IDENT_RE + ')\\b'
	};
	var HEXCOLOR = {
		className: 'number', begin: '#[0-9A-Fa-f]+'
	};
	var DEF_INTERNALS = {
		className: 'attribute',
		begin: '[A-Z\\_\\.\\-]+', end: ':',
		excludeEnd: true,
		illegal: '[^\\s]',
		starts: {
			endsWithParent: true, excludeEnd: true,
			contains: [
				HEXCOLOR,
				hljs.CSS_NUMBER_MODE,
				hljs.QUOTE_STRING_MODE,
				hljs.APOS_STRING_MODE,
				hljs.C_BLOCK_COMMENT_MODE,
				{
					className: 'meta', begin: '!important'
				}
			]
		}
	};
	return {
		case_insensitive: true,
		illegal: '[=/|\']',
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'selector-id', begin: '\\#[A-Za-z0-9_-]+',
				relevance: 0
			},
			{
				className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+',
				relevance: 0
			},
			{
				className: 'selector-attr', begin: '\\[', end: '\\]',
				illegal: '$'
			},
			{
				className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\s]'
				begin: '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
				relevance: 0
			},
			{
				begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'
			},
			{
				begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'
			},
			VARIABLE,
			{
				className: 'attribute',
				begin: '\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
				illegal: '[^\\s]'
			},
			{
				begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b'
			},
			{
				begin: ':', end: ';',
				contains: [
					VARIABLE,
					HEXCOLOR,
					hljs.CSS_NUMBER_MODE,
					hljs.QUOTE_STRING_MODE,
					hljs.APOS_STRING_MODE,
					{
						className: 'meta', begin: '!important'
					}
				]
			},
			{
				begin: '@', end: '[{;]',
				keywords: 'mixin include extend for if else each while charset import debug media page content font-face namespace warn',
				contains: [
					VARIABLE,
					hljs.QUOTE_STRING_MODE,
					hljs.APOS_STRING_MODE,
					HEXCOLOR,
					hljs.CSS_NUMBER_MODE,
					{
						begin: '\\s[A-Za-z0-9_.-]+',
						relevance: 0
					}
				]
			}
		]
	};
}
);

// #END

// === web/sql.js

/*
 Language: SQL
 Contributors: Nikolay Lisienko <info@neor.ru>, Heiko August <post@auge8472.de>, Travis Odom <travis.a.odom@gmail.com>, Vadimtro <vadimtro@yahoo.com>, Benjamin Auder <benjamin.auder@gmail.com>
 Category: common
 */

// syntax/web/sql.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('sql',
function(hljs) {
	var COMMENT_MODE = hljs.COMMENT('--', '$');
	return {
		case_insensitive: true,
		illegal: /[<>{}*]/,
		contains: [
			{
				beginKeywords:
					'begin end start commit rollback savepoint lock alter create drop rename call ' +
					'delete do handler insert load replace select truncate update set show pragma grant ' +
					'merge describe use explain help declare prepare execute deallocate release ' +
					'unlock purge reset change stop analyze cache flush optimize repair kill ' +
					'install uninstall checksum restore check backup revoke comment with',
				end: /;/, endsWithParent: true,
				lexemes: /[\w\.]+/,
				keywords: {
					keyword:
						'as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +
						'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +
						'allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply ' +
						'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +
						'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +
						'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +
						'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +
						'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +
						'buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +
						'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +
						'char_length character_length characters characterset charindex charset charsetform charsetid check ' +
						'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +
						'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +
						'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +
						'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +
						'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +
						'consider consistent constant constraint constraints constructor container content contents context ' +
						'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +
						'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +
						'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +
						'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +
						'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +
						'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +
						'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +
						'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +
						'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +
						'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +
						'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +
						'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +
						'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +
						'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +
						'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +
						'execu execut execute exempt exists exit exp expire explain export export_set extended extent external ' +
						'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +
						'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +
						'finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign ' +
						'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +
						'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +
						'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +
						'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +
						'hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified ' +
						'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +
						'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +
						'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +
						'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +
						'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +
						'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase ' +
						'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +
						'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +
						'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +
						'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +
						'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +
						'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +
						'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +
						'minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month ' +
						'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +
						'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +
						'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +
						'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +
						'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +
						'noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +
						'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +
						'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +
						'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +
						'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +
						'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +
						'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +
						'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +
						'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +
						'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +
						'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +
						'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +
						'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +
						'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +
						'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +
						'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +
						'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +
						'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +
						'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +
						'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +
						'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +
						'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +
						'sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select ' +
						'self sequence sequential serializable server servererror session session_user sessions_per_user set ' +
						'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +
						'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +
						'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +
						'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +
						'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +
						'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +
						'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +
						'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +
						'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +
						'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +
						'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +
						'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo ' +
						'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +
						'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +
						'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +
						'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +
						'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +
						'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot ' +
						'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +
						'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +
						'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +
						'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +
						'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +
						'wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped ' +
						'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +
						'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',
					literal:
						'true false null unknown',
					built_in:
						'array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number ' +
						'numeric real record serial serial8 smallint text time timestamp varchar varying void'
				},
				contains: [
					{
						className: 'string',
						begin: '\'', end: '\'',
						contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
					},
					{
						className: 'string',
						begin: '"', end: '"',
						contains: [hljs.BACKSLASH_ESCAPE, {begin: '""'}]
					},
					{
						className: 'string',
						begin: '`', end: '`',
						contains: [hljs.BACKSLASH_ESCAPE]
					},
					hljs.C_NUMBER_MODE,
					hljs.C_BLOCK_COMMENT_MODE,
					COMMENT_MODE,
					hljs.HASH_COMMENT_MODE
				]
			},
			hljs.C_BLOCK_COMMENT_MODE,
			COMMENT_MODE,
			hljs.HASH_COMMENT_MODE
		]
	};
}
);

// #END

// === web/xml.js

/*
Language: HTML, XML
Category: common
*/

// syntax/web/xml.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('xml',
function(hljs) {
	var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
	var TAG_INTERNALS = {
		endsWithParent: true,
		illegal: /</,
		relevance: 0,
		contains: [
			{
				className: 'attr',
				begin: XML_IDENT_RE,
				relevance: 0
			},
			{
				begin: /=\s*/,
				relevance: 0,
				contains: [
					{
						className: 'string',
						endsParent: true,
						variants: [
							{begin: /"/, end: /"/},
							{begin: /'/, end: /'/},
							{begin: /[^\s"'=<>`]+/}
						]
					}
				]
			}
		]
	};
	return {
		aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],
		case_insensitive: true,
		contains: [
			{
				className: 'meta',
				begin: '<!DOCTYPE', end: '>',
				relevance: 10,
				contains: [{begin: '\\[', end: '\\]'}]
			},
			hljs.COMMENT(
				'<!--',
				'-->',
				{
					relevance: 10
				}
			),
			{
				begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',
				relevance: 10
			},
			{
				className: 'meta',
				begin: /<\?xml/, end: /\?>/, relevance: 10
			},
			{
				begin: /<\?(php)?/, end: /\?>/,
				subLanguage: 'php',
				contains: [
					// We don't want the php closing tag ?> to close the PHP block when
					// inside any of the following blocks:
					{begin: '/\\*', end: '\\*/', skip: true},
					{begin: 'b"', end: '"', skip: true},
					{begin: 'b\'', end: '\'', skip: true},
					hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null, className: null, contains: null, skip: true}),
					hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null, className: null, contains: null, skip: true})
				]
			},
			{
				className: 'tag',
				/*
				The lookahead pattern (?=...) ensures that 'begin' only matches
				'<style' as a single word, followed by a whitespace or an
				ending braket. The '$' is needed for the lexeme to be recognized
				by hljs.subMode() that tests lexemes outside the stream.
				*/
				begin: '<style(?=\\s|>|$)', end: '>',
				keywords: {name: 'style'},
				contains: [TAG_INTERNALS],
				starts: {
					end: '</style>', returnEnd: true,
					subLanguage: ['css', 'xml']
				}
			},
			{
				className: 'tag',
				// See the comment in the <style tag about the lookahead pattern
				begin: '<script(?=\\s|>|$)', end: '>',
				keywords: {name: 'script'},
				contains: [TAG_INTERNALS],
				starts: {
					end: '\<\/script\>', returnEnd: true,
					subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']
				}
			},
			{
				className: 'tag',
				begin: '</?', end: '/?>',
				contains: [
					{
						className: 'name', begin: /[^\/><\s]+/, relevance: 0
					},
					TAG_INTERNALS
				]
			}
		]
	};
}
);

// #END

// === web/yaml.js

/*
Language: YAML
Author: Stefan Wienert <stwienert@gmail.com>
Description: YAML (Yet Another Markdown Language)
Category: config
### modified by unixman: remove unused dependency to ruby, YAML is mostly used without it !
*/

// syntax/web/yaml.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('yaml',
function(hljs) {
	var LITERALS = 'true false yes no null';

	var keyPrefix = '^[ \\-]*';
	var keyName =  '[a-zA-Z_][\\w\\-]*';
	var KEY = {
		className: 'attr',
		variants: [
			{ begin: keyPrefix + keyName + ":"},
			{ begin: keyPrefix + '"' + keyName + '"' + ":"},
			{ begin: keyPrefix + "'" + keyName + "'" + ":"}
		]
	};

	var STRING = {
		className: 'string',
		relevance: 0,
		variants: [
			{begin: /'/, end: /'/},
			{begin: /"/, end: /"/},
			{begin: /\S+/}
		],
		contains: [
			hljs.BACKSLASH_ESCAPE
		]
	};

	return {
		case_insensitive: true,
		aliases: ['yml', 'YAML', 'yaml'],
		contains: [
			KEY,
			{
				className: 'meta',
				begin: '^---\s*$',
				relevance: 10
			},
			{ // multi line string
				className: 'string',
				begin: '[\\|>] *$',
				returnEnd: true,
				contains: STRING.contains,
				// very simple termination: next hash key
				end: KEY.variants[0].begin
			},
			{ // data type
				className: 'type',
				begin: '!!' + hljs.UNDERSCORE_IDENT_RE,
			},
			{ // fragment id &ref
				className: 'meta',
				begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$',
			},
			{ // fragment reference *ref
				className: 'meta',
				begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
			},
			{ // array listing
				className: 'bullet',
				begin: '^ *-',
				relevance: 0
			},
			hljs.HASH_COMMENT_MODE,
			{
				beginKeywords: LITERALS,
				keywords: {literal: LITERALS}
			},
			hljs.C_NUMBER_MODE,
			STRING
		]
	};
}
);

// #END

// === tpl/markertpl.js

/*
Language: Marker-TPL (Smart.Framework) v.20210610.1720
Requires: xml.js
Author: unix-world.org
Description: Marker-TPL is a templating language for PHP and Javascript built into Smart.Framework
Category: template
*/

// syntax/tpl/markertpl.js
// HighlightJs: v.9.18.5

hljs.registerLanguage('markertpl',
function(hljs) {

	var SYNTAX = 'IF LOOP ELSE';

	return {
		aliases: ['markertpl','markerstpl','smartframeworktpl','markup'],
		case_insensitive: false,
		subLanguage: 'xml',
		contains: [
			hljs.COMMENT(/\[%%%COMMENT%%%\]/, /\[%%%\/COMMENT%%%\]/),
			{ // syntax: if, loop, specials (space, tab, new line, carriage return, left/right square bracket)
				className: 'meta',
				begin: /\[%%%/, end: /%%%\]/,
				contains: [
					{
						className: 'variable',
						begin: /([\/a-zA-Z0-9_\-\.]+)/, // {{{SYNC-TPL-EXPR-SPECIALS}}}
					},
					{ // {{{SYNC-TPL-EXPR-IF}}} {{{SYNC-TPL-EXPR-LOOP}}}
						className: 'string',
						begin: /[\|a-zA-Z0-9_\-\.\:]+/,
						contains: [
							{ // {{{SYNC-TPL-EXPR-IF}}}
								className: 'operator', // tag
								begin: /\:(@\=\=|@\!\=|@\<\=|@\<|@\>\=|@\>|\=\=|\!\=|\<\=|\<|\>\=|\>|\!%|%|\!\?|\?|\^~|\^\*|&~|&\*|\$~|\$\*){1,3}/,
							},
							{ // {{{SYNC-TPL-EXPR-IF}}}
								className: 'string',
								begin: /([^\[\]]*);/,
							},
						],
					},
					{
						className: 'meta',
						begin: /(\([0-9]+\))/,
						starts: {
							endsWithParent: true,
							relevance: 0
						}
					},
				]
			},
			{ // sub-template
				className: 'meta',
				begin: /\[@@@/, end: /@@@\]/,
				contains: [
					{
						className: 'section',
						begin: /([A-Z\-]+\:){1}/,
					},
					{ // {{{SYNC-TPL-EXPR-SUBTPL}}}
						className: 'string',
						begin: /([a-zA-Z0-9_\-\.\/\!\?%]+)/,
						contains: [
							{
								className: 'symbol',
								begin: /(\|[a-z0-9\-]+)+/,
								starts: {
									endsWithParent: true,
									relevance: 0
								},
							}
						],
						starts: {
							endsWithParent: true,
							relevance: 0
						},
					},
				]
			},
			{ // markers
				className: 'meta',
				begin: /\[###/, end: /###\]/,
				contains: [
					{
						className: 'keyword',
						begin: /([A-Z0-9_\-\.]+)/,
						contains: [
							{
								className: 'symbol',
								begin: /(\|[a-z0-9]+)+/,
								starts: {
									endsWithParent: true,
									relevance: 0
								},
							}
						],
						starts: {
							endsWithParent: true,
							relevance: 0
						},
					},
				]
			},
			{ // placeholders
				className: 'title',
				begin: /\[\:\:\:/, end: /\:\:\:\]/,
				contains: [
					{
						className: 'keyword',
						begin: /[A-Z0-9_\-\.]+/,
						returnEnd: true
					}
				]
			}
		]
	};
}
);

// #END

// === tpl/tex.js

/*
Language: TeX
Author: Vladimir Moskva <vladmos@gmail.com>
Website: http://fulc.ru/
Category: markup
*/

// syntax/tpl/tex.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('tex',
function(hljs) {
	var COMMAND = {
		className: 'tag',
		begin: /\\/,
		relevance: 0,
		contains: [
			{
				className: 'name',
				variants: [
					{begin: /[a-zA-Zа-яА-я]+[*]?/},
					{begin: /[^a-zA-Zа-яА-я0-9]/}
				],
				starts: {
					endsWithParent: true,
					relevance: 0,
					contains: [
						{
							className: 'string', // because it looks like attributes in HTML tags
							variants: [
								{begin: /\[/, end: /\]/},
								{begin: /\{/, end: /\}/}
							]
						},
						{
							begin: /\s*=\s*/, endsWithParent: true,
							relevance: 0,
							contains: [
								{
									className: 'number',
									begin: /-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/
								}
							]
						}
					]
				}
			}
		]
	};

	return {
		contains: [
			COMMAND,
			{
				className: 'formula',
				contains: [COMMAND],
				relevance: 0,
				variants: [
					{begin: /\$\$/, end: /\$\$/},
					{begin: /\$/, end: /\$/}
				]
			},
			hljs.COMMENT(
				'%',
				'$',
				{
					relevance: 0
				}
			)
		]
	};
}
);

// #END

// === lnx/awk.js

/*
Language: Awk
Author: Matthew Daly <matthewbdaly@gmail.com>
Website: http://matthewdaly.co.uk/
Description: language definition for Awk scripts
*/

// syntax/lnx/awk.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('awk',
function(hljs) {
	var VARIABLE = {
		className: 'variable',
		variants: [
			{begin: /\$[\w\d#@][\w\d_]*/},
			{begin: /\$\{(.*?)}/}
		]
	};
	var KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
	var STRING = {
		className: 'string',
		contains: [hljs.BACKSLASH_ESCAPE],
		variants: [
			{
				begin: /(u|b)?r?'''/, end: /'''/,
				relevance: 10
			},
			{
				begin: /(u|b)?r?"""/, end: /"""/,
				relevance: 10
			},
			{
				begin: /(u|r|ur)'/, end: /'/,
				relevance: 10
			},
			{
				begin: /(u|r|ur)"/, end: /"/,
				relevance: 10
			},
			{
				begin: /(b|br)'/, end: /'/
			},
			{
				begin: /(b|br)"/, end: /"/
			},
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE
		]
	};
	return {
	 keywords: {
		 keyword: KEYWORDS
		},
		contains: [
			VARIABLE,
			STRING,
			hljs.REGEXP_MODE,
			hljs.HASH_COMMENT_MODE,
			hljs.NUMBER_MODE
		]
	}
}
);

// #END

// === lnx/bash.js

/*
Language: Bash
Author: vah <vahtenberg@gmail.com>
Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
Category: common
*/

// syntax/lnx/bash.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('bash',
function(hljs) {
	var VAR = {
		className: 'variable',
		variants: [
			{begin: /\$[\w\d#@][\w\d_]*/},
			{begin: /\$\{(.*?)}/}
		]
	};
	var QUOTE_STRING = {
		className: 'string',
		begin: /"/, end: /"/,
		contains: [
			hljs.BACKSLASH_ESCAPE,
			VAR,
			{
				className: 'variable',
				begin: /\$\(/, end: /\)/,
				contains: [hljs.BACKSLASH_ESCAPE]
			}
		]
	};
	var APOS_STRING = {
		className: 'string',
		begin: /'/, end: /'/
	};

	return {
		aliases: ['sh', 'zsh'],
		lexemes: /\b-?[a-z\._]+\b/,
		keywords: {
			keyword:
				'if then else elif fi for while in do done case esac function',
			literal:
				'true false',
			built_in:
				// Shell built-ins
				// http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
				'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
				'trap umask unset ' +
				// Bash built-ins
				'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
				'read readarray source type typeset ulimit unalias ' +
				// Shell modifiers
				'set shopt ' +
				// Zsh built-ins
				'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
				'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
				'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
				'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
				'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
				'zpty zregexparse zsocket zstyle ztcp',
			_:
				'-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster
		},
		contains: [
			{
				className: 'meta',
				begin: /^#![^\n]+sh\s*$/,
				relevance: 10
			},
			{
				className: 'function',
				begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
				returnBegin: true,
				contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
				relevance: 0
			},
			hljs.HASH_COMMENT_MODE,
			QUOTE_STRING,
			APOS_STRING,
			VAR
		]
	};
}
);

// #END

// === lnx/perl.js

/*
Language: Perl
Author: Peter Leonov <gojpeg@yandex.ru>
Category: common
*/

// syntax/lnx/perl.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('perl',
function(hljs) {
	var PERL_KEYWORDS = 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' +
		'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' +
		'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq' +
		'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' +
		'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget' +
		'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' +
		'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' +
		'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' +
		'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' +
		'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' +
		'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' +
		'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' +
		'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' +
		'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' +
		'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' +
		'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' +
		'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir' +
		'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' +
		'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when';
	var SUBST = {
		className: 'subst',
		begin: '[$@]\\{', end: '\\}',
		keywords: PERL_KEYWORDS
	};
	var METHOD = {
		begin: '->{', end: '}'
		// contains defined later
	};
	var VAR = {
		variants: [
			{begin: /\$\d/},
			{begin: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},
			{begin: /[\$%@][^\s\w{]/, relevance: 0}
		]
	};
	var STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];
	var PERL_DEFAULT_CONTAINS = [
		VAR,
		hljs.HASH_COMMENT_MODE,
		hljs.COMMENT(
			'^\\=\\w',
			'\\=cut',
			{
				endsWithParent: true
			}
		),
		METHOD,
		{
			className: 'string',
			contains: STRING_CONTAINS,
			variants: [
				{
					begin: 'q[qwxr]?\\s*\\(', end: '\\)',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\[', end: '\\]',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\{', end: '\\}',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\|', end: '\\|',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\<', end: '\\>',
					relevance: 5
				},
				{
					begin: 'qw\\s+q', end: 'q',
					relevance: 5
				},
				{
					begin: '\'', end: '\'',
					contains: [hljs.BACKSLASH_ESCAPE]
				},
				{
					begin: '"', end: '"'
				},
				{
					begin: '`', end: '`',
					contains: [hljs.BACKSLASH_ESCAPE]
				},
				{
					begin: '{\\w+}',
					contains: [],
					relevance: 0
				},
				{
					begin: '\-?\\w+\\s*\\=\\>',
					contains: [],
					relevance: 0
				}
			]
		},
		{
			className: 'number',
			begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
			relevance: 0
		},
		{ // regexp container
			begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
			keywords: 'split return print reverse grep',
			relevance: 0,
			contains: [
				hljs.HASH_COMMENT_MODE,
				{
					className: 'regexp',
					begin: '(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*',
					relevance: 10
				},
				{
					className: 'regexp',
					begin: '(m|qr)?/', end: '/[a-z]*',
					contains: [hljs.BACKSLASH_ESCAPE],
					relevance: 0 // allows empty "//" which is a common comment delimiter in other languages
				}
			]
		},
		{
			className: 'function',
			beginKeywords: 'sub', end: '(\\s*\\(.*?\\))?[;{]', excludeEnd: true,
			relevance: 5,
			contains: [hljs.TITLE_MODE]
		},
		{
			begin: '-\\w\\b',
			relevance: 0
		},
		{
			begin: "^__DATA__$",
			end: "^__END__$",
			subLanguage: 'mojolicious',
			contains: [
				{
						begin: "^@@.*",
						end: "$",
						className: "comment"
				}
			]
		}
	];
	SUBST.contains = PERL_DEFAULT_CONTAINS;
	METHOD.contains = PERL_DEFAULT_CONTAINS;

	return {
		aliases: ['pl', 'pm'],
		lexemes: /[\w\.]+/,
		keywords: PERL_KEYWORDS,
		contains: PERL_DEFAULT_CONTAINS
	};
}
);

// #END

// === lnx/shell.js

/*
Language: Shell Session
Requires: bash.js
Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
Category: common
*/

// syntax/lnx/shell.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('shell',
function(hljs) {
	return {
		aliases: ['console'],
		contains: [
			{
				className: 'meta',
				begin: '^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]',
				starts: {
					end: '$', subLanguage: 'bash'
				}
			}
		]
	}
}
);

// #END

// === srv/accesslog.js

/*
 Language: Access log
 Author: Oleg Efimov <efimovov@gmail.com>
 Description: Apache/Nginx Access Logs
 */

// syntax/srv/accesslog.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('accesslog',
function(hljs) {
	return {
		contains: [
			// IP
			{
				className: 'number',
				begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
			},
			// Other numbers
			{
				className: 'number',
				begin: '\\b\\d+\\b',
				relevance: 0
			},
			// Requests
			{
				className: 'string',
				begin: '"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)', end: '"',
				keywords: 'GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE',
				illegal: '\\n',
				relevance: 10
			},
			// Dates
			{
				className: 'string',
				begin: /\[/, end: /\]/,
				illegal: '\\n'
			},
			// Strings
			{
				className: 'string',
				begin: '"', end: '"',
				illegal: '\\n'
			}
		]
	};
}
);

// #END

// === srv/apache.js

/*
Language: Apache
Author: Ruslan Keba <rukeba@gmail.com>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Website: http://rukeba.com/
Description: language definition for Apache configuration files (httpd.conf & .htaccess)
Category: common, config
*/

// syntax/srv/apache.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('apache',
function(hljs) {
	var NUMBER = {className: 'number', begin: '[\\$%]\\d+'};
	return {
		aliases: ['apacheconf'],
		case_insensitive: true,
		contains: [
			hljs.HASH_COMMENT_MODE,
			{className: 'section', begin: '</?', end: '>'},
			{
				className: 'attribute',
				begin: /\w+/,
				relevance: 0,
				// keywords aren’t needed for highlighting per se, they only boost relevance
				// for a very generally defined mode (starts with a word, ends with line-end
				keywords: {
					nomarkup:
						'order deny allow setenv rewriterule rewriteengine rewritecond documentroot ' +
						'sethandler errordocument loadmodule options header listen serverroot ' +
						'servername'
				},
				starts: {
					end: /$/,
					relevance: 0,
					keywords: {
						literal: 'on off all'
					},
					contains: [
						{
							className: 'meta',
							begin: '\\s\\[', end: '\\]$'
						},
						{
							className: 'variable',
							begin: '[\\$%]\\{', end: '\\}',
							contains: ['self', NUMBER]
						},
						NUMBER,
						hljs.QUOTE_STRING_MODE
					]
				}
			}
		],
		illegal: /\S/
	};
}
);

// #END

// === srv/dns.js

/*
Language: DNS Zone file
Author: Tim Schumacher <tim@datenknoten.me>
Category: config
*/

// syntax/srv/dns.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('dns',
function(hljs) {
	return {
		aliases: ['bind', 'zone'],
		keywords: {
			keyword:
				'IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX ' +
				'LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT'
		},
		contains: [
			hljs.COMMENT(';', '$', {relevance: 0}),
			{
				className: 'meta',
				begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
			},
			// IPv6
			{
				className: 'number',
				begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
			},
			// IPv4
			{
				className: 'number',
				begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
			},
			hljs.inherit(hljs.NUMBER_MODE, {begin: /\b\d+[dhwm]?/})
		]
	};
}
);

// #END

// === srv/nginx.js

/*
Language: Nginx
Author: Peter Leonov <gojpeg@yandex.ru>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: common, config
*/

// syntax/srv/nginx.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('nginx',
function(hljs) {
	var VAR = {
		className: 'variable',
		variants: [
			{begin: /\$\d+/},
			{begin: /\$\{/, end: /}/},
			{begin: '[\\$\\@]' + hljs.UNDERSCORE_IDENT_RE}
		]
	};
	var DEFAULT = {
		endsWithParent: true,
		lexemes: '[a-z/_]+',
		keywords: {
			literal:
				'on off yes no true false none blocked debug info notice warn error crit ' +
				'select break last permanent redirect kqueue rtsig epoll poll /dev/poll'
		},
		relevance: 0,
		illegal: '=>',
		contains: [
			hljs.HASH_COMMENT_MODE,
			{
				className: 'string',
				contains: [hljs.BACKSLASH_ESCAPE, VAR],
				variants: [
					{begin: /"/, end: /"/},
					{begin: /'/, end: /'/}
				]
			},
			// this swallows entire URLs to avoid detecting numbers within
			{
				begin: '([a-z]+):/', end: '\\s', endsWithParent: true, excludeEnd: true,
				contains: [VAR]
			},
			{
				className: 'regexp',
				contains: [hljs.BACKSLASH_ESCAPE, VAR],
				variants: [
					{begin: "\\s\\^", end: "\\s|{|;", returnEnd: true},
					// regexp locations (~, ~*)
					{begin: "~\\*?\\s+", end: "\\s|{|;", returnEnd: true},
					// *.example.com
					{begin: "\\*(\\.[a-z\\-]+)+"},
					// sub.example.*
					{begin: "([a-z\\-]+\\.)+\\*"}
				]
			},
			// IP
			{
				className: 'number',
				begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
			},
			// units
			{
				className: 'number',
				begin: '\\b\\d+[kKmMgGdshdwy]*\\b',
				relevance: 0
			},
			VAR
		]
	};

	return {
		aliases: ['nginxconf'],
		contains: [
			hljs.HASH_COMMENT_MODE,
			{
				begin: hljs.UNDERSCORE_IDENT_RE + '\\s+{', returnBegin: true,
				end: '{',
				contains: [
					{
						className: 'section',
						begin: hljs.UNDERSCORE_IDENT_RE
					}
				],
				relevance: 0
			},
			{
				begin: hljs.UNDERSCORE_IDENT_RE + '\\s', end: ';|{', returnBegin: true,
				contains: [
					{
						className: 'attribute',
						begin: hljs.UNDERSCORE_IDENT_RE,
						starts: DEFAULT
					}
				],
				relevance: 0
			}
		],
		illegal: '[^\\s\\}]'
	};
}
);

// #END

// === srv/pf.js

/*
Language: pf
Category: config
Author: Peter Piwowarski <oldlaptop654@aol.com>
Description: The pf.conf(5) format as of OpenBSD 5.6
*/

// syntax/srv/pf.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('pf',
function(hljs) {
	var MACRO = {
		className: 'variable',
		begin: /\$[\w\d#@][\w\d_]*/
	};
	var TABLE = {
		className: 'variable',
		begin: /<(?!\/)/, end: />/
	};
	var QUOTE_STRING = {
		className: 'string',
		begin: /"/, end: /"/
	};

	return {
		aliases: ['pf.conf'],
		lexemes: /[a-z0-9_<>-]+/,
		keywords: {
			built_in: /* block match pass are "actions" in pf.conf(5), the rest are
								 * lexically similar top-level commands.
								 */
				'block match pass load anchor|5 antispoof|10 set table',
			keyword:
				'in out log quick on rdomain inet inet6 proto from port os to route' +
				'allow-opts divert-packet divert-reply divert-to flags group icmp-type' +
				'icmp6-type label once probability recieved-on rtable prio queue' +
				'tos tag tagged user keep fragment for os drop' +
				'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin' +
				'source-hash static-port' +
				'dup-to reply-to route-to' +
				'parent bandwidth default min max qlimit' +
				'block-policy debug fingerprints hostid limit loginterface optimization' +
				'reassemble ruleset-optimization basic none profile skip state-defaults' +
				'state-policy timeout' +
				'const counters persist' +
				'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy' +
				'source-track global rule max-src-nodes max-src-states max-src-conn' +
				'max-src-conn-rate overload flush' +
				'scrub|5 max-mss min-ttl no-df|10 random-id',
			literal:
				'all any no-route self urpf-failed egress|5 unknown'
		},
		contains: [
			hljs.HASH_COMMENT_MODE,
			hljs.NUMBER_MODE,
			hljs.QUOTE_STRING_MODE,
			MACRO,
			TABLE
		]
	};
}
);

// #END

// === net/csp.js

/*
Language: CSP
Description: Content Security Policy definition highlighting
Author: Taras <oxdef@oxdef.info>
*/

// syntax/net/csp.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('csp',
function(hljs) {
	return {
		case_insensitive: false,
		lexemes: '[a-zA-Z][a-zA-Z0-9_-]*',
		keywords: {
			keyword: 'base-uri child-src connect-src default-src font-src form-action' +
				' frame-ancestors frame-src img-src media-src object-src plugin-types' +
				' report-uri sandbox script-src style-src',
		},
		contains: [
		{
			className: 'string',
			begin: "'", end: "'"
		},
		{
			className: 'attribute',
			begin: '^Content', end: ':', excludeEnd: true,
		},
		]
	};
}
);

// #END

// === net/http.js

/*
Language: HTTP
Description: HTTP request and response headers with automatic body highlighting
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Category: common, protocols
*/

// syntax/net/http.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('http',
function(hljs) {
	var VERSION = 'HTTP/[0-9\\.]+';
	return {
		aliases: ['https'],
		illegal: '\\S',
		contains: [
			{
				begin: '^' + VERSION, end: '$',
				contains: [{className: 'number', begin: '\\b\\d{3}\\b'}]
			},
			{
				begin: '^[A-Z]+ (.*?) ' + VERSION + '$', returnBegin: true, end: '$',
				contains: [
					{
						className: 'string',
						begin: ' ', end: ' ',
						excludeBegin: true, excludeEnd: true
					},
					{
						begin: VERSION
					},
					{
						className: 'keyword',
						begin: '[A-Z]+'
					}
				]
			},
			{
				className: 'attribute',
				begin: '^\\w', end: ': ', excludeEnd: true,
				illegal: '\\n|\\s|=',
				starts: {end: '$', relevance: 0}
			},
			{
				begin: '\\n\\n',
				starts: {subLanguage: [], endsWithParent: true}
			}
		]
	};
}
);

// #END

// === lang/cmake.js

/*
Language: CMake
Description: CMake is an open-source cross-platform system for build automation.
Author: Igor Kalnitsky <igor@kalnitsky.org>
Website: http://kalnitsky.org/
*/

// syntax/lang/cmake.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('cmake',
function(hljs) {
	return {
		aliases: ['cmake.in'],
		case_insensitive: true,
		keywords: {
			keyword:
				// scripting commands
				'break cmake_host_system_information cmake_minimum_required cmake_parse_arguments ' +
				'cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro ' +
				'endwhile execute_process file find_file find_library find_package find_path ' +
				'find_program foreach function get_cmake_property get_directory_property ' +
				'get_filename_component get_property if include include_guard list macro ' +
				'mark_as_advanced math message option return separate_arguments ' +
				'set_directory_properties set_property set site_name string unset variable_watch while ' +
				// project commands
				'add_compile_definitions add_compile_options add_custom_command add_custom_target ' +
				'add_definitions add_dependencies add_executable add_library add_link_options ' +
				'add_subdirectory add_test aux_source_directory build_command create_test_sourcelist ' +
				'define_property enable_language enable_testing export fltk_wrap_ui ' +
				'get_source_file_property get_target_property get_test_property include_directories ' +
				'include_external_msproject include_regular_expression install link_directories ' +
				'link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions ' +
				'set_source_files_properties set_target_properties set_tests_properties source_group ' +
				'target_compile_definitions target_compile_features target_compile_options ' +
				'target_include_directories target_link_directories target_link_libraries ' +
				'target_link_options target_sources try_compile try_run ' +
				// CTest commands
				'ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ' +
				'ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ' +
				'ctest_test ctest_update ctest_upload ' +
				// deprecated commands
				'build_name exec_program export_library_dependencies install_files install_programs ' +
				'install_targets load_command make_directory output_required_files remove ' +
				'subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file ' +
				'qt5_use_modules qt5_use_package qt5_wrap_cpp ' +
				// core keywords
				'on off true false and or not command policy target test exists is_newer_than ' +
				'is_directory is_symlink is_absolute matches less greater equal less_equal ' +
				'greater_equal strless strgreater strequal strless_equal strgreater_equal version_less ' +
				'version_greater version_equal version_less_equal version_greater_equal in_list defined'
		},
		contains: [
			{
				className: 'variable',
				begin: '\\${', end: '}'
			},
			hljs.HASH_COMMENT_MODE,
			hljs.QUOTE_STRING_MODE,
			hljs.NUMBER_MODE
		]
	};
}
);

// #END

// === lang/coffeescript.js

/*
Language: CoffeeScript
Author: Dmytrii Nagirniak <dnagir@gmail.com>
Contributors: Oleg Efimov <efimovov@gmail.com>, Cédric Néhémie <cedric.nehemie@gmail.com>
Description: CoffeeScript is a programming language that transcompiles to JavaScript. For info about language see http://coffeescript.org/
Category: common, scripting
*/

// syntax/lang/coffeescript.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('coffeescript',
function(hljs) {
	var KEYWORDS = {
		keyword:
			// JS keywords
			'in if for while finally new do return else break catch instanceof throw try this ' +
			'switch continue typeof delete debugger super yield import export from as default await ' +
			// Coffee keywords
			'then unless until loop of by when and or is isnt not',
		literal:
			// JS literals
			'true false null undefined ' +
			// Coffee literals
			'yes no on off',
		built_in:
			'npm require console print module global window document'
	};
	var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	var SUBST = {
		className: 'subst',
		begin: /#\{/, end: /}/,
		keywords: KEYWORDS
	};
	var EXPRESSIONS = [
		hljs.BINARY_NUMBER_MODE,
		hljs.inherit(hljs.C_NUMBER_MODE, {starts: {end: '(\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp
		{
			className: 'string',
			variants: [
				{
					begin: /'''/, end: /'''/,
					contains: [hljs.BACKSLASH_ESCAPE]
				},
				{
					begin: /'/, end: /'/,
					contains: [hljs.BACKSLASH_ESCAPE]
				},
				{
					begin: /"""/, end: /"""/,
					contains: [hljs.BACKSLASH_ESCAPE, SUBST]
				},
				{
					begin: /"/, end: /"/,
					contains: [hljs.BACKSLASH_ESCAPE, SUBST]
				}
			]
		},
		{
			className: 'regexp',
			variants: [
				{
					begin: '///', end: '///',
					contains: [SUBST, hljs.HASH_COMMENT_MODE]
				},
				{
					begin: '//[gim]*',
					relevance: 0
				},
				{
					// regex can't start with space to parse x / 2 / 3 as two divisions
					// regex can't start with *, and it supports an "illegal" in the main mode
					begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
				}
			]
		},
		{
			begin: '@' + JS_IDENT_RE // relevance booster
		},
		{
			subLanguage: 'javascript',
			excludeBegin: true, excludeEnd: true,
			variants: [
				{
					begin: '```', end: '```',
				},
				{
					begin: '`', end: '`',
				}
			]
		}
	];
	SUBST.contains = EXPRESSIONS;

	var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
	var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
	var PARAMS = {
		className: 'params',
		begin: '\\([^\\(]', returnBegin: true,
		/* We need another contained nameless mode to not have every nested
		pair of parens to be called "params" */
		contains: [{
			begin: /\(/, end: /\)/,
			keywords: KEYWORDS,
			contains: ['self'].concat(EXPRESSIONS)
		}]
	};

	return {
		aliases: ['coffee', 'cson', 'iced'],
		keywords: KEYWORDS,
		illegal: /\/\*/,
		contains: EXPRESSIONS.concat([
			hljs.COMMENT('###', '###'),
			hljs.HASH_COMMENT_MODE,
			{
				className: 'function',
				begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
				returnBegin: true,
				contains: [TITLE, PARAMS]
			},
			{
				// anonymous function start
				begin: /[:\(,=]\s*/,
				relevance: 0,
				contains: [
					{
						className: 'function',
						begin: PARAMS_RE, end: '[-=]>',
						returnBegin: true,
						contains: [PARAMS]
					}
				]
			},
			{
				className: 'class',
				beginKeywords: 'class',
				end: '$',
				illegal: /[:="\[\]]/,
				contains: [
					{
						beginKeywords: 'extends',
						endsWithParent: true,
						illegal: /[:="\[\]]/,
						contains: [TITLE]
					},
					TITLE
				]
			},
			{
				begin: JS_IDENT_RE + ':', end: ':',
				returnBegin: true, returnEnd: true,
				relevance: 0
			}
		])
	};
}
);

// #END

// === lang/cpp.js

/*
Language: C++
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>
Category: common, system
*/

// syntax/lang/cpp.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('cpp',
function(hljs) {
	var CPP_PRIMITIVE_TYPES = {
		className: 'keyword',
		begin: '\\b[a-z\\d_]*_t\\b'
	};

	var STRINGS = {
		className: 'string',
		variants: [
			{
				begin: '(u8?|U|L)?"', end: '"',
				illegal: '\\n',
				contains: [hljs.BACKSLASH_ESCAPE]
			},
			{
				// TODO: This does not handle raw string literals with prefixes. Using
				// a single regex with backreferences would work (note to use *?
				// instead of * to make it non-greedy), but the mode.terminators
				// computation in highlight.js breaks the counting.
				begin: '(u8?|U|L)?R"\\(', end: '\\)"',
			},
			{
				begin: '\'\\\\?.', end: '\'',
				illegal: '.'
			}
		]
	};

	var NUMBERS = {
		className: 'number',
		variants: [
			{ begin: '\\b(0b[01\']+)' },
			{ begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
			{ begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
		],
		relevance: 0
	};

	var PREPROCESSOR =       {
		className: 'meta',
		begin: /#\s*[a-z]+\b/, end: /$/,
		keywords: {
			'meta-keyword':
				'if else elif endif define undef warning error line ' +
				'pragma ifdef ifndef include'
		},
		contains: [
			{
				begin: /\\\n/, relevance: 0
			},
			hljs.inherit(STRINGS, {className: 'meta-string'}),
			{
				className: 'meta-string',
				begin: /<[^\n>]*>/, end: /$/,
				illegal: '\\n',
			},
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE
		]
	};

	var FUNCTION_TITLE = hljs.IDENT_RE + '\\s*\\(';

	var CPP_KEYWORDS = {
		keyword: 'int float while private char catch import module export virtual operator sizeof ' +
			'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +
			'unsigned long volatile static protected bool template mutable if public friend ' +
			'do goto auto void enum else break extern using asm case typeid ' +
			'short reinterpret_cast|10 default double register explicit signed typename try this ' +
			'switch continue inline delete alignof constexpr decltype ' +
			'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +
			'atomic_bool atomic_char atomic_schar ' +
			'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +
			'atomic_ullong new throw return ' +
			'and or not',
		built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +
			'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +
			'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +
			'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +
			'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +
			'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +
			'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +
			'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +
			'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
		literal: 'true false nullptr NULL'
	};

	var EXPRESSION_CONTAINS = [
		CPP_PRIMITIVE_TYPES,
		hljs.C_LINE_COMMENT_MODE,
		hljs.C_BLOCK_COMMENT_MODE,
		NUMBERS,
		STRINGS
	];

	return {
		aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],
		keywords: CPP_KEYWORDS,
		illegal: '</',
		contains: EXPRESSION_CONTAINS.concat([
			PREPROCESSOR,
			{
				begin: '\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<', end: '>',
				keywords: CPP_KEYWORDS,
				contains: ['self', CPP_PRIMITIVE_TYPES]
			},
			{
				begin: hljs.IDENT_RE + '::',
				keywords: CPP_KEYWORDS
			},
			{
				// This mode covers expression context where we can't expect a function
				// definition and shouldn't highlight anything that looks like one:
				// `return some()`, `else if()`, `(x*sum(1, 2))`
				variants: [
					{begin: /=/, end: /;/},
					{begin: /\(/, end: /\)/},
					{beginKeywords: 'new throw return else', end: /;/}
				],
				keywords: CPP_KEYWORDS,
				contains: EXPRESSION_CONTAINS.concat([
					{
						begin: /\(/, end: /\)/,
						keywords: CPP_KEYWORDS,
						contains: EXPRESSION_CONTAINS.concat(['self']),
						relevance: 0
					}
				]),
				relevance: 0
			},
			{
				className: 'function',
				begin: '(' + hljs.IDENT_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
				returnBegin: true, end: /[{;=]/,
				excludeEnd: true,
				keywords: CPP_KEYWORDS,
				illegal: /[^\w\s\*&]/,
				contains: [
					{
						begin: FUNCTION_TITLE, returnBegin: true,
						contains: [hljs.TITLE_MODE],
						relevance: 0
					},
					{
						className: 'params',
						begin: /\(/, end: /\)/,
						keywords: CPP_KEYWORDS,
						relevance: 0,
						contains: [
							hljs.C_LINE_COMMENT_MODE,
							hljs.C_BLOCK_COMMENT_MODE,
							STRINGS,
							NUMBERS,
							CPP_PRIMITIVE_TYPES,
							// Count matching parentheses.
							{
								begin: /\(/, end: /\)/,
								keywords: CPP_KEYWORDS,
								relevance: 0,
								contains: [
									'self',
									hljs.C_LINE_COMMENT_MODE,
									hljs.C_BLOCK_COMMENT_MODE,
									STRINGS,
									NUMBERS,
									CPP_PRIMITIVE_TYPES
								]
							}
						]
					},
					hljs.C_LINE_COMMENT_MODE,
					hljs.C_BLOCK_COMMENT_MODE,
					PREPROCESSOR
				]
			},
			{
				className: 'class',
				beginKeywords: 'class struct', end: /[{;:]/,
				contains: [
					{begin: /</, end: />/, contains: ['self']}, // skip generic stuff
					hljs.TITLE_MODE
				]
			}
		]),
		exports: {
			preprocessor: PREPROCESSOR,
			strings: STRINGS,
			keywords: CPP_KEYWORDS
		}
	};
}
);

// #END

// === lang/dart.js

/*
Language: Dart
Requires: markdown.js
Author: Maxim Dikun <dikmax@gmail.com>
Description: Dart a modern, object-oriented language developed by Google. For more information see https://www.dartlang.org/
Website: https://dart.dev
Category: scripting
*/

// syntax/lang/dart.js
// HighlightJs: v.9.18.5

hljs.registerLanguage('dart',
function(hljs) {
	var SUBST = {
		className: 'subst',
		variants: [{
			begin: '\\$[A-Za-z0-9_]+'
		}],
	};

	var BRACED_SUBST = {
		className: 'subst',
		variants: [{
			begin: '\\${',
			end: '}'
		}, ],
		keywords: 'true false null this is new super',
	};

	var STRING = {
		className: 'string',
		variants: [{
				begin: 'r\'\'\'',
				end: '\'\'\''
			},
			{
				begin: 'r"""',
				end: '"""'
			},
			{
				begin: 'r\'',
				end: '\'',
				illegal: '\\n'
			},
			{
				begin: 'r"',
				end: '"',
				illegal: '\\n'
			},
			{
				begin: '\'\'\'',
				end: '\'\'\'',
				contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]
			},
			{
				begin: '"""',
				end: '"""',
				contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]
			},
			{
				begin: '\'',
				end: '\'',
				illegal: '\\n',
				contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]
			},
			{
				begin: '"',
				end: '"',
				illegal: '\\n',
				contains: [hljs.BACKSLASH_ESCAPE, SUBST, BRACED_SUBST]
			}
		]
	};
	BRACED_SUBST.contains = [
		hljs.C_NUMBER_MODE, STRING
	];

	var KEYWORDS = {
		keyword: 'abstract as assert async await break case catch class const continue covariant default deferred do ' +
			'dynamic else enum export extends extension external factory false final finally for Function get hide if ' +
			'implements import in inferface is library mixin new null on operator part rethrow return set show static ' +
			'super switch sync this throw true try typedef var void while with yield',
		built_in:
			// dart:core
			'Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set ' +
			'Stopwatch String StringBuffer StringSink Symbol Type Uri bool double dynamic int num print ' +
			// dart:html
			'Element ElementList document querySelector querySelectorAll window'
	};

	return {
		keywords: KEYWORDS,
		contains: [
			STRING,
			hljs.COMMENT(
				'/\\*\\*',
				'\\*/', {
					subLanguage: 'markdown'
				}
			),
			hljs.COMMENT(
				'///+\\s*',
				'$', {
					contains: [{
						subLanguage: 'markdown',
						begin: '.',
						end: '$',
					}]
				}
			),
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'class',
				beginKeywords: 'class interface',
				end: '{',
				excludeEnd: true,
				contains: [{
						beginKeywords: 'extends implements'
					},
					hljs.UNDERSCORE_TITLE_MODE
				]
			},
			hljs.C_NUMBER_MODE,
			{
				className: 'meta',
				begin: '@[A-Za-z]+'
			},
			{
				begin: '=>' // No markup, just a relevance booster
			}
		]
	}
}
);

// #END

// === lang/go.js

/*
Language: Go
Author: Stephan Kountso aka StepLg <steplg@gmail.com>
Contributors: Evgeny Stepanischev <imbolk@gmail.com>
Description: Google go language (golang). For info about language see http://golang.org/
Category: system
*/

// syntax/lang/go.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('go',
function(hljs) {
	var GO_KEYWORDS = {
		keyword:
			'break default func interface select case map struct chan else goto package switch ' +
			'const fallthrough if range type continue for import return var go defer ' +
			'bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 ' +
			'uint16 uint32 uint64 int uint uintptr rune',
		literal:
			 'true false iota nil',
		built_in:
			'append cap close complex copy imag len make new panic print println real recover delete'
	};
	return {
		aliases: ['golang'],
		keywords: GO_KEYWORDS,
		illegal: '</',
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'string',
				variants: [
					hljs.QUOTE_STRING_MODE,
					{begin: '\'', end: '[^\\\\]\''},
					{begin: '`', end: '`'},
				]
			},
			{
				className: 'number',
				variants: [
					{begin: hljs.C_NUMBER_RE + '[dflsi]', relevance: 1},
					hljs.C_NUMBER_MODE
				]
			},
			{
				begin: /:=/ // relevance booster
			},
			{
				className: 'function',
				beginKeywords: 'func', end: /\s*\{/, excludeEnd: true,
				contains: [
					hljs.TITLE_MODE,
					{
						className: 'params',
						begin: /\(/, end: /\)/,
						keywords: GO_KEYWORDS,
						illegal: /["']/
					}
				]
			}
		]
	};
}
);

// #END

// === lang/lua.js

/*
Language: Lua
Author: Andrew Fedorov <dmmdrs@mail.ru>
Category: scripting
*/

// syntax/lang/lua.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('lua',
function(hljs) {
	var OPENING_LONG_BRACKET = '\\[=*\\[';
	var CLOSING_LONG_BRACKET = '\\]=*\\]';
	var LONG_BRACKETS = {
		begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
		contains: ['self']
	};
	var COMMENTS = [
		hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
		hljs.COMMENT(
			'--' + OPENING_LONG_BRACKET,
			CLOSING_LONG_BRACKET,
			{
				contains: [LONG_BRACKETS],
				relevance: 10
			}
		)
	];
	return {
		lexemes: hljs.UNDERSCORE_IDENT_RE,
		keywords: {
			literal: "true false nil",
			keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
			built_in:
				//Metatags and globals:
				'_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len ' +
				'__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert ' +
				//Standard methods and properties:
				'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring' +
				'module next pairs pcall print rawequal rawget rawset require select setfenv' +
				'setmetatable tonumber tostring type unpack xpcall arg self' +
				//Library methods and properties (one line per library):
				'coroutine resume yield status wrap create running debug getupvalue ' +
				'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv ' +
				'io lines write close flush open output type read stderr stdin input stdout popen tmpfile ' +
				'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan ' +
				'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall ' +
				'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower ' +
				'table setn insert getn foreachi maxn foreach concat sort remove'
		},
		contains: COMMENTS.concat([
			{
				className: 'function',
				beginKeywords: 'function', end: '\\)',
				contains: [
					hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
					{
						className: 'params',
						begin: '\\(', endsWithParent: true,
						contains: COMMENTS
					}
				].concat(COMMENTS)
			},
			hljs.C_NUMBER_MODE,
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE,
			{
				className: 'string',
				begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
				contains: [LONG_BRACKETS],
				relevance: 5
			}
		])
	};
}
);

// #END

// === lang/makefile.js

/*
Language: Makefile
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Joël Porquet <joel@porquet.org>
Category: common
*/

// syntax/lang/makefile.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('makefile',
function(hljs) {
	/* Variables: simple (eg $(var)) and special (eg $@) */
	var VARIABLE = {
		className: 'variable',
		variants: [
			{
				begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
				contains: [hljs.BACKSLASH_ESCAPE],
			},
			{
				begin: /\$[@%<?\^\+\*]/
			},
		]
	};
	/* Quoted string with variables inside */
	var QUOTE_STRING = {
		className: 'string',
		begin: /"/, end: /"/,
		contains: [
			hljs.BACKSLASH_ESCAPE,
			VARIABLE,
		]
	};
	/* Function: $(func arg,...) */
	var FUNC = {
		className: 'variable',
		begin: /\$\([\w-]+\s/, end: /\)/,
		keywords: {
			built_in:
				'subst patsubst strip findstring filter filter-out sort ' +
				'word wordlist firstword lastword dir notdir suffix basename ' +
				'addsuffix addprefix join wildcard realpath abspath error warning ' +
				'shell origin flavor foreach if or and call eval file value',
		},
		contains: [
			VARIABLE,
		]
	};
	/* Variable assignment */
	var VAR_ASSIG = {
		begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*[:+?]?=',
		illegal: '\\n',
		returnBegin: true,
		contains: [
			{
				begin: '^' + hljs.UNDERSCORE_IDENT_RE, end: '[:+?]?=',
				excludeEnd: true,
			}
		]
	};
	/* Meta targets (.PHONY) */
	var META = {
		className: 'meta',
		begin: /^\.PHONY:/, end: /$/,
		keywords: {'meta-keyword': '.PHONY'},
		lexemes: /[\.\w]+/
	};
	/* Targets */
	var TARGET = {
		className: 'section',
		begin: /^[^\s]+:/, end: /$/,
		contains: [VARIABLE,]
	};
	return {
		aliases: ['mk', 'mak'],
		keywords:
			'define endef undefine ifdef ifndef ifeq ifneq else endif ' +
			'include -include sinclude override export unexport private vpath',
		lexemes: /[\w-]+/,
		contains: [
			hljs.HASH_COMMENT_MODE,
			VARIABLE,
			QUOTE_STRING,
			FUNC,
			VAR_ASSIG,
			META,
			TARGET,
		]
	};
}
);

// #END

// === lang/python.js

/*
Language: Python
Category: common
*/

// syntax/lang/python.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('python',
function(hljs) {
	var KEYWORDS = {
		keyword:
			'and elif is global as in if from raise for except finally print import pass return ' +
			'exec else break not with class assert yield try while continue del or def lambda ' +
			'async await nonlocal|10 None True False',
		built_in:
			'Ellipsis NotImplemented'
	};
	var PROMPT = {
		className: 'meta',  begin: /^(>>>|\.\.\.) /
	};
	var SUBST = {
		className: 'subst',
		begin: /\{/, end: /\}/,
		keywords: KEYWORDS,
		illegal: /#/
	};
	var STRING = {
		className: 'string',
		contains: [hljs.BACKSLASH_ESCAPE],
		variants: [
			{
				begin: /(u|b)?r?'''/, end: /'''/,
				contains: [hljs.BACKSLASH_ESCAPE, PROMPT],
				relevance: 10
			},
			{
				begin: /(u|b)?r?"""/, end: /"""/,
				contains: [hljs.BACKSLASH_ESCAPE, PROMPT],
				relevance: 10
			},
			{
				begin: /(fr|rf|f)'''/, end: /'''/,
				contains: [hljs.BACKSLASH_ESCAPE, PROMPT, SUBST]
			},
			{
				begin: /(fr|rf|f)"""/, end: /"""/,
				contains: [hljs.BACKSLASH_ESCAPE, PROMPT, SUBST]
			},
			{
				begin: /(u|r|ur)'/, end: /'/,
				relevance: 10
			},
			{
				begin: /(u|r|ur)"/, end: /"/,
				relevance: 10
			},
			{
				begin: /(b|br)'/, end: /'/
			},
			{
				begin: /(b|br)"/, end: /"/
			},
			{
				begin: /(fr|rf|f)'/, end: /'/,
				contains: [hljs.BACKSLASH_ESCAPE, SUBST]
			},
			{
				begin: /(fr|rf|f)"/, end: /"/,
				contains: [hljs.BACKSLASH_ESCAPE, SUBST]
			},
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE
		]
	};
	var NUMBER = {
		className: 'number', relevance: 0,
		variants: [
			{begin: hljs.BINARY_NUMBER_RE + '[lLjJ]?'},
			{begin: '\\b(0o[0-7]+)[lLjJ]?'},
			{begin: hljs.C_NUMBER_RE + '[lLjJ]?'}
		]
	};
	var PARAMS = {
		className: 'params',
		begin: /\(/, end: /\)/,
		contains: ['self', PROMPT, NUMBER, STRING]
	};
	SUBST.contains = [STRING, NUMBER, PROMPT];
	return {
		aliases: ['py', 'gyp'],
		keywords: KEYWORDS,
		illegal: /(<\/|->|\?)|=>/,
		contains: [
			PROMPT,
			NUMBER,
			STRING,
			hljs.HASH_COMMENT_MODE,
			{
				variants: [
					{className: 'function', beginKeywords: 'def'},
					{className: 'class', beginKeywords: 'class'}
				],
				end: /:/,
				illegal: /[${=;\n,]/,
				contains: [
					hljs.UNDERSCORE_TITLE_MODE,
					PARAMS,
					{
						begin: /->/, endsWithParent: true,
						keywords: 'None'
					}
				]
			},
			{
				className: 'meta',
				begin: /^[\t ]*@/, end: /$/
			},
			{
				begin: /\b(print|exec)\(/ // don’t highlight keywords-turned-functions in Python 3
			}
		]
	};
}
);

// #END

// === lang/ruby.js

/*
Language: Ruby
Author: Anton Kovalyov <anton@kovalyov.net>
Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
Category: common
*/

// syntax/lang/ruby.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('ruby',
function(hljs) {
	var RUBY_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
	var RUBY_KEYWORDS = {
		keyword:
			'and then defined module in return redo if BEGIN retry end for self when ' +
			'next until do begin unless END rescue else break undef not super class case ' +
			'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor',
		literal:
			'true false nil'
	};
	var YARDOCTAG = {
		className: 'doctag',
		begin: '@[A-Za-z]+'
	};
	var IRB_OBJECT = {
		begin: '#<', end: '>'
	};
	var COMMENT_MODES = [
		hljs.COMMENT(
			'#',
			'$',
			{
				contains: [YARDOCTAG]
			}
		),
		hljs.COMMENT(
			'^\\=begin',
			'^\\=end',
			{
				contains: [YARDOCTAG],
				relevance: 10
			}
		),
		hljs.COMMENT('^__END__', '\\n$')
	];
	var SUBST = {
		className: 'subst',
		begin: '#\\{', end: '}',
		keywords: RUBY_KEYWORDS
	};
	var STRING = {
		className: 'string',
		contains: [hljs.BACKSLASH_ESCAPE, SUBST],
		variants: [
			{begin: /'/, end: /'/},
			{begin: /"/, end: /"/},
			{begin: /`/, end: /`/},
			{begin: '%[qQwWx]?\\(', end: '\\)'},
			{begin: '%[qQwWx]?\\[', end: '\\]'},
			{begin: '%[qQwWx]?{', end: '}'},
			{begin: '%[qQwWx]?<', end: '>'},
			{begin: '%[qQwWx]?/', end: '/'},
			{begin: '%[qQwWx]?%', end: '%'},
			{begin: '%[qQwWx]?-', end: '-'},
			{begin: '%[qQwWx]?\\|', end: '\\|'},
			{
				// \B in the beginning suppresses recognition of ?-sequences where ?
				// is the last character of a preceding identifier, as in: `func?4`
				begin: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/
			},
			{
				begin: /<<(-?)\w+$/, end: /^\s*\w+$/,
			}
		]
	};
	var PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)', endsParent: true,
		keywords: RUBY_KEYWORDS
	};

	var RUBY_DEFAULT_CONTAINS = [
		STRING,
		IRB_OBJECT,
		{
			className: 'class',
			beginKeywords: 'class module', end: '$|;',
			illegal: /=/,
			contains: [
				hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
				{
					begin: '<\\s*',
					contains: [{
						begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE
					}]
				}
			].concat(COMMENT_MODES)
		},
		{
			className: 'function',
			beginKeywords: 'def', end: '$|;',
			contains: [
				hljs.inherit(hljs.TITLE_MODE, {begin: RUBY_METHOD_RE}),
				PARAMS
			].concat(COMMENT_MODES)
		},
		{
			// swallow namespace qualifiers before symbols
			begin: hljs.IDENT_RE + '::'
		},
		{
			className: 'symbol',
			begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
			relevance: 0
		},
		{
			className: 'symbol',
			begin: ':(?!\\s)',
			contains: [STRING, {begin: RUBY_METHOD_RE}],
			relevance: 0
		},
		{
			className: 'number',
			begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
			relevance: 0
		},
		{
			begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))' // variables
		},
		{
			className: 'params',
			begin: /\|/, end: /\|/,
			keywords: RUBY_KEYWORDS
		},
		{ // regexp container
			begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
			keywords: 'unless',
			contains: [
				IRB_OBJECT,
				{
					className: 'regexp',
					contains: [hljs.BACKSLASH_ESCAPE, SUBST],
					illegal: /\n/,
					variants: [
						{begin: '/', end: '/[a-z]*'},
						{begin: '%r{', end: '}[a-z]*'},
						{begin: '%r\\(', end: '\\)[a-z]*'},
						{begin: '%r!', end: '![a-z]*'},
						{begin: '%r\\[', end: '\\][a-z]*'}
					]
				}
			].concat(COMMENT_MODES),
			relevance: 0
		}
	].concat(COMMENT_MODES);

	SUBST.contains = RUBY_DEFAULT_CONTAINS;
	PARAMS.contains = RUBY_DEFAULT_CONTAINS;

	var SIMPLE_PROMPT = "[>?]>";
	var DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+>";
	var RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>";

	var IRB_DEFAULT = [
		{
			begin: /^\s*=>/,
			starts: {
				end: '$', contains: RUBY_DEFAULT_CONTAINS
			}
		},
		{
			className: 'meta',
			begin: '^('+SIMPLE_PROMPT+"|"+DEFAULT_PROMPT+'|'+RVM_PROMPT+')',
			starts: {
				end: '$', contains: RUBY_DEFAULT_CONTAINS
			}
		}
	];

	return {
		aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],
		keywords: RUBY_KEYWORDS,
		illegal: /\/\*/,
		contains: COMMENT_MODES.concat(IRB_DEFAULT).concat(RUBY_DEFAULT_CONTAINS)
	};
}
);

// #END

// === lang/rust.js

/*
Language: Rust
Author: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>
Contributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>
Category: system
*/

// syntax/lang/rust.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('rust',
function(hljs) {
	var NUM_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
	var KEYWORDS =
		'alignof as be box break const continue crate do else enum extern ' +
		'false fn for if impl in let loop match mod mut offsetof once priv ' +
		'proc pub pure ref return self Self sizeof static struct super trait true ' +
		'type typeof unsafe unsized use virtual while where yield move default';
	var BUILTINS =
		// functions
		'drop ' +
		// types
		'i8 i16 i32 i64 i128 isize ' +
		'u8 u16 u32 u64 u128 usize ' +
		'f32 f64 ' +
		'str char bool ' +
		'Box Option Result String Vec ' +
		// traits
		'Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug ' +
		'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +
		'Extend IntoIterator DoubleEndedIterator ExactSizeIterator ' +
		'SliceConcatExt ToString ' +
		// macros
		'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +
		'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +
		'include_bin! include_str! line! local_data_key! module_path! ' +
		'option_env! print! println! select! stringify! try! unimplemented! ' +
		'unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!';
	return {
		aliases: ['rs'],
		keywords: {
			keyword:
				KEYWORDS,
			literal:
				'true false Some None Ok Err',
			built_in:
				BUILTINS
		},
		lexemes: hljs.IDENT_RE + '!?',
		illegal: '</',
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.COMMENT('/\\*', '\\*/', {contains: ['self']}),
			hljs.inherit(hljs.QUOTE_STRING_MODE, {begin: /b?"/, illegal: null}),
			{
				className: 'string',
				variants: [
					 { begin: /r(#*)"(.|\n)*?"\1(?!#)/ },
					 { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
				]
			},
			{
				className: 'symbol',
				begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
			},
			{
				className: 'number',
				variants: [
					{ begin: '\\b0b([01_]+)' + NUM_SUFFIX },
					{ begin: '\\b0o([0-7_]+)' + NUM_SUFFIX },
					{ begin: '\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX },
					{ begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +
									 NUM_SUFFIX
					}
				],
				relevance: 0
			},
			{
				className: 'function',
				beginKeywords: 'fn', end: '(\\(|<)', excludeEnd: true,
				contains: [hljs.UNDERSCORE_TITLE_MODE]
			},
			{
				className: 'meta',
				begin: '#\\!?\\[', end: '\\]',
				contains: [
					{
						className: 'meta-string',
						begin: /"/, end: /"/
					}
				]
			},
			{
				className: 'class',
				beginKeywords: 'type', end: ';',
				contains: [
					hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
				],
				illegal: '\\S'
			},
			{
				className: 'class',
				beginKeywords: 'trait enum struct union', end: '{',
				contains: [
					hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
				],
				illegal: '[\\w\\d]'
			},
			{
				begin: hljs.IDENT_RE + '::',
				keywords: {built_in: BUILTINS}
			},
			{
				begin: '->'
			}
		]
	};
}
);

// #END

// === lang/tcl.js

/*
Language: Tcl
Author: Radek Liska <radekliska@gmail.com>
*/

// syntax/lang/tcl.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('tcl',
function(hljs) {
	return {
		aliases: ['tk'],
		keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' +
			'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' +
			'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' +
			'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' +
			'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' +
			'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 '+
			'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex '+
			'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename '+
			'return safe scan seek set socket source split string subst switch tcl_endOfWord '+
			'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter '+
			'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update '+
			'uplevel upvar variable vwait while',
		contains: [
			hljs.COMMENT(';[ \\t]*#', '$'),
			hljs.COMMENT('^[ \\t]*#', '$'),
			{
				beginKeywords: 'proc',
				end: '[\\{]',
				excludeEnd: true,
				contains: [
					{
						className: 'title',
						begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
						end: '[ \\t\\n\\r]',
						endsWithParent: true,
						excludeEnd: true
					}
				]
			},
			{
				excludeEnd: true,
				variants: [
					{
						begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\(([a-zA-Z0-9_])*\\)',
						end: '[^a-zA-Z0-9_\\}\\$]'
					},
					{
						begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
						end: '(\\))?[^a-zA-Z0-9_\\}\\$]'
					}
				]
			},
			{
				className: 'string',
				contains: [hljs.BACKSLASH_ESCAPE],
				variants: [
					hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
					hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
				]
			},
			{
				className: 'number',
				variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
			}
		]
	}
}
);

// #END

// === lang/vala.js

/*
Language: Vala
Author: Antono Vasiljev <antono.vasiljev@gmail.com>
Description: Vala is a new programming language that aims to bring modern programming language features to GNOME developers without imposing any additional runtime requirements and without using a different ABI compared to applications and libraries written in C.
*/

// syntax/lang/vala.js
// HighlightJs: v.9.13.1.2 (fixed by unixman)

hljs.registerLanguage('vala',
function(hljs) {
	return {
		keywords: {
			keyword:
				// Value types
				'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 ' +
				'uint16 uint32 uint64 float double bool struct enum string void ' +
				// Reference types
				'weak unowned owned ' +
				// Modifiers
				'async signal static abstract interface override virtual delegate ' +
				// Control Structures
				'if while do for foreach else switch case break default return try catch ' +
				// Visibility
				'public private protected internal ' +
				// Other
				'using new this get set const stdout stdin stderr var',
			built_in:
				'DBus GLib CCode Gee Object Gtk Posix Soup Json WebKit SDL',
			literal:
				'false true null'
		},
		contains: [
			{
				className: 'class',
				beginKeywords: 'class interface namespace', end: '{', excludeEnd: true,
				illegal: '[^,:\\n\\s\\.]',
				contains: [
					hljs.UNDERSCORE_TITLE_MODE
				]
			},
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'string',
				begin: '"""', end: '"""',
				relevance: 5
			},
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE,
			hljs.C_NUMBER_MODE,
			{
				className: 'meta',
				begin: '^#', end: '$',
				relevance: 2
			}
		]
	};
}
);

// #END

// ===== [#]

// # JS Package: syntax-base.pak.js :: #END#

