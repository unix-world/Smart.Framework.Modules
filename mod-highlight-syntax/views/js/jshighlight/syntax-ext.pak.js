
// # JS Package: syntax-ext.pak.js :: #START# :: @ generated from mod-highlight-syntax/views/js/jshighlight/syntax/*.js
// Included Files: tpl2/*.js ; lang2/*.js ; ms/*.js ; net2/*.js ; hw/*.js #

// ### DO NOT EDIT THIS FILE AS IT WILL BE OVERWRITTEN EACH TIME THE INCLUDED SCRIPTS WILL CHANGE !!! ###

// === tpl2/django.js

/*
Language: Django
Requires: xml.js
Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
Contributors: Ilya Baryshev <baryshev@gmail.com>
Category: template
*/

// syntax/tpl/django.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('django',
function(hljs) {
	var FILTER = {
		begin: /\|[A-Za-z]+:?/,
		keywords: {
			name:
				'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags ' +
				'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands ' +
				'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode ' +
				'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort ' +
				'dictsortreversed default_if_none pluralize lower join center default ' +
				'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first ' +
				'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize ' +
				'localtime utc timezone'
		},
		contains: [
			hljs.QUOTE_STRING_MODE,
			hljs.APOS_STRING_MODE
		]
	};

	return {
		aliases: ['jinja'],
		case_insensitive: true,
		subLanguage: 'xml',
		contains: [
			hljs.COMMENT(/\{%\s*comment\s*%}/, /\{%\s*endcomment\s*%}/),
			hljs.COMMENT(/\{#/, /#}/),
			{
				className: 'template-tag',
				begin: /\{%/, end: /%}/,
				contains: [
					{
						className: 'name',
						begin: /\w+/,
						keywords: {
							name:
								'comment endcomment load templatetag ifchanged endifchanged if endif firstof for ' +
								'endfor ifnotequal endifnotequal widthratio extends include spaceless ' +
								'endspaceless regroup ifequal endifequal ssi now with cycle url filter ' +
								'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif ' +
								'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix ' +
								'plural get_current_language language get_available_languages ' +
								'get_current_language_bidi get_language_info get_language_info_list localize ' +
								'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone ' +
								'verbatim'
						},
						starts: {
							endsWithParent: true,
							keywords: 'in by as',
							contains: [FILTER],
							relevance: 0
						}
					}
				]
			},
			{
				className: 'template-variable',
				begin: /\{\{/, end: /}}/,
				contains: [FILTER]
			}
		]
	};
}
);

// #END

// === tpl2/dust.js

/*
Language: Dust
Requires: xml.js
Author: Michael Allen <michael.allen@benefitfocus.com>
Description: Matcher for dust templates.
Category: template
### modified by unixman
*/

// syntax/tpl/dust.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('dust',
function(hljs) {
	var EXPRESSION_KEYWORDS = 'if else'; // eq ne lt lte gt gte select default math sep
	return {
		aliases: ['dst'],
		case_insensitive: true,
		subLanguage: 'xml',
		contains: [
			hljs.COMMENT(/\{\!/, /\!}/), // fix by unixman
			{ // sub-tpl
				className: 'title',
				begin: /\{[\>|\<]/,
				end: /\/?\}/,
				illegal: /\n/
			},
			{ // syntax
				className: 'symbol',
				begin: /\{[\#\/@\:\?\^\+]/,
				end: /\}/,
				illegal: /\n/,
				contains: [
					{
						className: 'symbol',
						begin: /[a-zA-Z\.\-_]+/,
						starts: {
							endsWithParent: true,
							relevance: 0,
							contains: [ hljs.QUOTE_STRING_MODE ]
						},
						keywords: EXPRESSION_KEYWORDS
					}
				],
			},
			{ // variable
				begin: /\{/, end: /\}/,
				illegal: /\n/,
				contains: [
					{
						className: 'keyword',
						begin: /[a-zA-Z0-9_\.]+/,
					//	returnEnd: true
					},
					{
						className: 'regexp',
						end: /(\|[a-z0-9]+)*/,
						starts: {
							endsWithParent: true,
							relevance: 0
						}
					}
				]
			}
		]
	};
}
);

// #END

// === tpl2/latte.js

/*
Language: Latte (nette)
Requires: xml.js
Author: Radu Ovidiu I. <iradu@unix-world.org>
Description: Latte is a templating language for PHP (from Nette framework)
Category: template
### created by unixman
*/

// syntax/tpl/latte.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('latte',
function(hljs) {
	var PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)'
	};

	var FUNCTION_NAMES = 'dump expand cache spaceless include php syntax l r contentType debugbreak block define import layout extends ifset';

	var FUNCTIONS = {
		beginKeywords: FUNCTION_NAMES,
		keywords: {name: FUNCTION_NAMES},
		relevance: 0,
		contains: [
			PARAMS
		]
	};

	var FILTER = {
		begin: /\|[A-Za-z_]+:?/,
		keywords:
			'noescape breaklines bytes capitalize datastream date escapecss escapehtml escapehtmlcomment escapeical escapejs escapeurl escapexml ' +
			'firstupper checkurl implode indent length lower nl2br number padleft padright repeat replace replacere reverse safeurl strip ' +
			'striphtml striptags substr trim truncate upper', // 'webalize' is disabled
		contains: [
			FUNCTIONS
		]
	};

	var TAGS = 	'if else ifset elseifset switch case default ' + // conditions
				'for foreach while continueIf breakIf first last sep ' + // loops
				'var capture'; // variables ('default' is already defined above)


	TAGS = TAGS + ' ' + TAGS.split(' ').map(function(t){return 'end' + t}).join(' ');

	return {
		aliases: ['nettetpl'],
		case_insensitive: true,
		subLanguage: 'xml',
		contains: [
			hljs.COMMENT(/\{\*/, /\*}/),
			{
				className: 'template-variable',
				begin: /\{\$([a-zA-Z0-9])+/, end: /}/,
				contains: ['self', FILTER, FUNCTIONS]
			},
			{
				//className: 'template-tag',
				className: 'symbol',
				begin: /\{\/?/, end: /}/,
				contains: [
					{
						className: 'name',
						begin: /([a-zA-Z0-9])+/,
						keywords: TAGS,
						starts: {
							endsWithParent: true,
							contains: [FILTER, FUNCTIONS],
							relevance: 0
						}
					}
				]
			}
		]
	};
}
);

// #END

// === tpl2/twig.js

/*
Language: Twig
Requires: xml.js
Author: Luke Holder <lukemh@gmail.com>
Description: Twig is a templating language for PHP
Category: template
### modified by unixman
*/

// syntax/tpl/twig.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('twig',
function(hljs) {
	var PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)'
	};

	var FUNCTION_NAMES = 'attribute block constant cycle date dump include ' +
									'max min parent random range source template_from_string';

	var FUNCTIONS = {
		beginKeywords: FUNCTION_NAMES,
		keywords: {name: FUNCTION_NAMES},
		relevance: 0,
		contains: [
			PARAMS
		]
	};

	var FILTER = {
		begin: /\|[A-Za-z_]+:?/,
		keywords:
			'abs batch capitalize convert_encoding date date_modify default ' +
			'escape first format join json_encode keys last length lower ' +
			'merge nl2br number_format raw replace reverse round slice sort split ' +
			'striptags title trim upper url_encode',
		contains: [
			FUNCTIONS
		]
	};

	var TAGS = 'autoescape block do embed extends filter flush for ' +
		'if else import include macro sandbox set spaceless use verbatim'; // fix by unixman ; add: else

	TAGS = TAGS + ' ' + TAGS.split(' ').map(function(t){return 'end' + t}).join(' ');

	return {
		aliases: ['craftcms'],
		case_insensitive: true,
		subLanguage: 'xml',
		contains: [
			hljs.COMMENT(/\{#/, /#}/),
			{
				//className: 'template-tag', // Fix by unixman
				className: 'symbol',
				begin: /\{%/, end: /%}/,
				contains: [
					{
						className: 'name',
						begin: /\w+/,
						keywords: TAGS,
						starts: {
							endsWithParent: true,
							contains: [FILTER, FUNCTIONS],
							relevance: 0
						}
					}
				]
			},
			{
				className: 'template-variable',
				begin: /\{\{/, end: /}}/,
				contains: ['self', FILTER, FUNCTIONS]
			}
		]
	};
}
);

// #END

// === lang2/basic.js

/*
Language: Basic
Author: Raphaël Assénat <raph@raphnet.net>
Description: Based on the BASIC reference from the Tandy 1000 guide
*/

// syntax/lang/basic.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('basic',
function(hljs) {
	return {
		case_insensitive: true,
		illegal: '^\.',
		// Support explicitely typed variables that end with $%! or #.
		lexemes: '[a-zA-Z][a-zA-Z0-9_\$\%\!\#]*',
		keywords: {
				keyword:
					'ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE ' +
					'CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ ' +
					'DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ ' +
					'EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO ' +
					'HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON ' +
					'OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET ' +
					'MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION ' +
					'BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET ' +
					'PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET ' +
					'RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP ' +
					'SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE ' +
					'WEND WIDTH WINDOW WRITE XOR'
		},
		contains: [
			hljs.QUOTE_STRING_MODE,
			hljs.COMMENT('REM', '$', {relevance: 10}),
			hljs.COMMENT('\'', '$', {relevance: 0}),
			{
				// Match line numbers
				className: 'symbol',
				begin: '^[0-9]+\ ',
				relevance: 10
			},
			{
				// Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
				className: 'number',
				begin: '\\b([0-9]+[0-9edED\.]*[#\!]?)',
				relevance: 0
			},
			{
				// Match hexadecimal numbers (&Hxxxx)
				className: 'number',
				begin: '(\&[hH][0-9a-fA-F]{1,4})'
			},
			{
				// Match octal numbers (&Oxxxxxx)
				className: 'number',
				begin: '(\&[oO][0-7]{1,6})'
			}
		]
	};
}
);

// #END

// === lang2/cs.js

/*
Language: C#
Author: Jason Diamond <jason@diamond.name>
Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>
Category: common
*/

// syntax/lang/cs.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('cs',
function(hljs) {
	var KEYWORDS = {
		keyword:
			// Normal keywords.
			'abstract as base bool break byte case catch char checked const continue decimal ' +
			'default delegate do double enum event explicit extern finally fixed float ' +
			'for foreach goto if implicit in int interface internal is lock long nameof ' +
			'object operator out override params private protected public readonly ref sbyte ' +
			'sealed short sizeof stackalloc static string struct switch this try typeof ' +
			'uint ulong unchecked unsafe ushort using virtual void volatile while ' +
			// Contextual keywords.
			'add alias ascending async await by descending dynamic equals from get global group into join ' +
			'let on orderby partial remove select set value var where yield',
		literal:
			'null false true'
	};
	var NUMBERS = {
		className: 'number',
		variants: [
			{ begin: '\\b(0b[01\']+)' },
			{ begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
			{ begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
		],
		relevance: 0
	};
	var VERBATIM_STRING = {
		className: 'string',
		begin: '@"', end: '"',
		contains: [{begin: '""'}]
	};
	var VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {illegal: /\n/});
	var SUBST = {
		className: 'subst',
		begin: '{', end: '}',
		keywords: KEYWORDS
	};
	var SUBST_NO_LF = hljs.inherit(SUBST, {illegal: /\n/});
	var INTERPOLATED_STRING = {
		className: 'string',
		begin: /\$"/, end: '"',
		illegal: /\n/,
		contains: [{begin: '{{'}, {begin: '}}'}, hljs.BACKSLASH_ESCAPE, SUBST_NO_LF]
	};
	var INTERPOLATED_VERBATIM_STRING = {
		className: 'string',
		begin: /\$@"/, end: '"',
		contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST]
	};
	var INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
		illegal: /\n/,
		contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST_NO_LF]
	});
	SUBST.contains = [
		INTERPOLATED_VERBATIM_STRING,
		INTERPOLATED_STRING,
		VERBATIM_STRING,
		hljs.APOS_STRING_MODE,
		hljs.QUOTE_STRING_MODE,
		NUMBERS,
		hljs.C_BLOCK_COMMENT_MODE
	];
	SUBST_NO_LF.contains = [
		INTERPOLATED_VERBATIM_STRING_NO_LF,
		INTERPOLATED_STRING,
		VERBATIM_STRING_NO_LF,
		hljs.APOS_STRING_MODE,
		hljs.QUOTE_STRING_MODE,
		NUMBERS,
		hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {illegal: /\n/})
	];
	var STRING = {
		variants: [
			INTERPOLATED_VERBATIM_STRING,
			INTERPOLATED_STRING,
			VERBATIM_STRING,
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE
		]
	};

	var TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';

	return {
		aliases: ['csharp'],
		keywords: KEYWORDS,
		illegal: /::/,
		contains: [
			hljs.COMMENT(
				'///',
				'$',
				{
					returnBegin: true,
					contains: [
						{
							className: 'doctag',
							variants: [
								{
									begin: '///', relevance: 0
								},
								{
									begin: '<!--|-->'
								},
								{
									begin: '</?', end: '>'
								}
							]
						}
					]
				}
			),
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'meta',
				begin: '#', end: '$',
				keywords: {
					'meta-keyword': 'if else elif endif define undef warning error line region endregion pragma checksum'
				}
			},
			STRING,
			NUMBERS,
			{
				beginKeywords: 'class interface', end: /[{;=]/,
				illegal: /[^\s:,]/,
				contains: [
					hljs.TITLE_MODE,
					hljs.C_LINE_COMMENT_MODE,
					hljs.C_BLOCK_COMMENT_MODE
				]
			},
			{
				beginKeywords: 'namespace', end: /[{;=]/,
				illegal: /[^\s:]/,
				contains: [
					hljs.inherit(hljs.TITLE_MODE, {begin: '[a-zA-Z](\\.?\\w)*'}),
					hljs.C_LINE_COMMENT_MODE,
					hljs.C_BLOCK_COMMENT_MODE
				]
			},
			{
				// [Attributes("")]
				className: 'meta',
				begin: '^\\s*\\[', excludeBegin: true, end: '\\]', excludeEnd: true,
				contains: [
					{className: 'meta-string', begin: /"/, end: /"/}
				]
			},
			{
				// Expression keywords prevent 'keyword Name(...)' from being
				// recognized as a function definition
				beginKeywords: 'new return throw await else',
				relevance: 0
			},
			{
				className: 'function',
				begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
				end: /\s*[{;=]/, excludeEnd: true,
				keywords: KEYWORDS,
				contains: [
					{
						begin: hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
						contains: [hljs.TITLE_MODE],
						relevance: 0
					},
					{
						className: 'params',
						begin: /\(/, end: /\)/,
						excludeBegin: true,
						excludeEnd: true,
						keywords: KEYWORDS,
						relevance: 0,
						contains: [
							STRING,
							NUMBERS,
							hljs.C_BLOCK_COMMENT_MODE
						]
					},
					hljs.C_LINE_COMMENT_MODE,
					hljs.C_BLOCK_COMMENT_MODE
				]
			}
		]
	};
}
);

// #END

// === lang2/d.js

/*
Language: D
Author: Aleksandar Ruzicic <aleksandar@ruzicic.info>
Description: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.
Version: 1.0a
Date: 2012-04-08
*/

// syntax/lang/d.js
// HighlightJs: v.9.13.1

/**
 * Known issues:
 *
 * - invalid hex string literals will be recognized as a double quoted strings
 *   but 'x' at the beginning of string will not be matched
 *
 * - delimited string literals are not checked for matching end delimiter
 *   (not possible to do with js regexp)
 *
 * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
 *   also, content of token string is not validated to contain only valid D tokens
 *
 * - special token sequence rule is not strictly following D grammar (anything following #line
 *   up to the end of line is matched as special token sequence)
 */
hljs.registerLanguage('d',
function(hljs) {
	/**
	 * Language keywords
	 *
	 * @type {Object}
	 */
	var D_KEYWORDS = {
		keyword:
			'abstract alias align asm assert auto body break byte case cast catch class ' +
			'const continue debug default delete deprecated do else enum export extern final ' +
			'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' +
			'interface invariant is lazy macro mixin module new nothrow out override package ' +
			'pragma private protected public pure ref return scope shared static struct ' +
			'super switch synchronized template this throw try typedef typeid typeof union ' +
			'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' +
			'__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
		built_in:
			'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' +
			'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' +
			'wstring',
		literal:
			'false null true'
	};

	/**
	 * Number literal regexps
	 *
	 * @type {String}
	 */
	var decimal_integer_re = '(0|[1-9][\\d_]*)',
		decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)',
		binary_integer_re = '0[bB][01_]+',
		hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)',
		hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re,

		decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')',
		decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|' +
								'\\d+\\.' + decimal_integer_nosus_re + decimal_integer_nosus_re + '|' +
								'\\.' + decimal_integer_re + decimal_exponent_re + '?' +
							')',
		hexadecimal_float_re = '(0[xX](' +
									hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|'+
									'\\.?' + hexadecimal_digits_re +
								 ')[pP][+-]?' + decimal_integer_nosus_re + ')',

		integer_re = '(' +
			decimal_integer_re + '|' +
			binary_integer_re  + '|' +
			 hexadecimal_integer_re   +
		')',

		float_re = '(' +
			hexadecimal_float_re + '|' +
			decimal_float_re  +
		')';

	/**
	 * Escape sequence supported in D string and character literals
	 *
	 * @type {String}
	 */
	var escape_sequence_re = '\\\\(' +
							'[\'"\\?\\\\abfnrtv]|' +  // common escapes
							'u[\\dA-Fa-f]{4}|' +     // four hex digit unicode codepoint
							'[0-7]{1,3}|' +       // one to three octal digit ascii char code
							'x[\\dA-Fa-f]{2}|' +    // two hex digit ascii char code
							'U[\\dA-Fa-f]{8}' +      // eight hex digit unicode codepoint
							')|' +
							'&[a-zA-Z\\d]{2,};';      // named character entity

	/**
	 * D integer number literals
	 *
	 * @type {Object}
	 */
	var D_INTEGER_MODE = {
		className: 'number',
			begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
			relevance: 0
	};

	/**
	 * [D_FLOAT_MODE description]
	 * @type {Object}
	 */
	var D_FLOAT_MODE = {
		className: 'number',
		begin: '\\b(' +
				float_re + '([fF]|L|i|[fF]i|Li)?|' +
				integer_re + '(i|[fF]i|Li)' +
			')',
		relevance: 0
	};

	/**
	 * D character literal
	 *
	 * @type {Object}
	 */
	var D_CHARACTER_MODE = {
		className: 'string',
		begin: '\'(' + escape_sequence_re + '|.)', end: '\'',
		illegal: '.'
	};

	/**
	 * D string escape sequence
	 *
	 * @type {Object}
	 */
	var D_ESCAPE_SEQUENCE = {
		begin: escape_sequence_re,
		relevance: 0
	};

	/**
	 * D double quoted string literal
	 *
	 * @type {Object}
	 */
	var D_STRING_MODE = {
		className: 'string',
		begin: '"',
		contains: [D_ESCAPE_SEQUENCE],
		end: '"[cwd]?'
	};

	/**
	 * D wysiwyg and delimited string literals
	 *
	 * @type {Object}
	 */
	var D_WYSIWYG_DELIMITED_STRING_MODE = {
		className: 'string',
		begin: '[rq]"',
		end: '"[cwd]?',
		relevance: 5
	};

	/**
	 * D alternate wysiwyg string literal
	 *
	 * @type {Object}
	 */
	var D_ALTERNATE_WYSIWYG_STRING_MODE = {
		className: 'string',
		begin: '`',
		end: '`[cwd]?'
	};

	/**
	 * D hexadecimal string literal
	 *
	 * @type {Object}
	 */
	var D_HEX_STRING_MODE = {
		className: 'string',
		begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
		relevance: 10
	};

	/**
	 * D delimited string literal
	 *
	 * @type {Object}
	 */
	var D_TOKEN_STRING_MODE = {
		className: 'string',
		begin: 'q"\\{',
		end: '\\}"'
	};

	/**
	 * Hashbang support
	 *
	 * @type {Object}
	 */
	var D_HASHBANG_MODE = {
		className: 'meta',
		begin: '^#!',
		end: '$',
		relevance: 5
	};

	/**
	 * D special token sequence
	 *
	 * @type {Object}
	 */
	var D_SPECIAL_TOKEN_SEQUENCE_MODE = {
		className: 'meta',
		begin: '#(line)',
		end: '$',
		relevance: 5
	};

	/**
	 * D attributes
	 *
	 * @type {Object}
	 */
	var D_ATTRIBUTE_MODE = {
		className: 'keyword',
		begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
	};

	/**
	 * D nesting comment
	 *
	 * @type {Object}
	 */
	var D_NESTING_COMMENT_MODE = hljs.COMMENT(
		'\\/\\+',
		'\\+\\/',
		{
			contains: ['self'],
			relevance: 10
		}
	);

	return {
		lexemes: hljs.UNDERSCORE_IDENT_RE,
		keywords: D_KEYWORDS,
		contains: [
			hljs.C_LINE_COMMENT_MODE,
				hljs.C_BLOCK_COMMENT_MODE,
				D_NESTING_COMMENT_MODE,
				D_HEX_STRING_MODE,
				D_STRING_MODE,
				D_WYSIWYG_DELIMITED_STRING_MODE,
				D_ALTERNATE_WYSIWYG_STRING_MODE,
				D_TOKEN_STRING_MODE,
				D_FLOAT_MODE,
				D_INTEGER_MODE,
				D_CHARACTER_MODE,
				D_HASHBANG_MODE,
				D_SPECIAL_TOKEN_SEQUENCE_MODE,
				D_ATTRIBUTE_MODE
		]
	};
}
);

// #END

// === lang2/delphi.js

/*
Language: Delphi
*/

// syntax/lang/delphi.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('delphi',
function(hljs) {
	var KEYWORDS =
		'exports register file shl array record property for mod while set ally label uses raise not ' +
		'stored class safecall var interface or private static exit index inherited to else stdcall ' +
		'override shr asm far resourcestring finalization packed virtual out and protected library do ' +
		'xorwrite goto near function end div overload object unit begin string on inline repeat until ' +
		'destructor write message program with read initialization except default nil if case cdecl in ' +
		'downto threadvar of try pascal const external constructor type public then implementation ' +
		'finally published procedure absolute reintroduce operator as is abstract alias assembler ' +
		'bitpacked break continue cppdecl cvar enumerator experimental platform deprecated ' +
		'unimplemented dynamic export far16 forward generic helper implements interrupt iochecks ' +
		'local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat ' +
		'specialize strict unaligned varargs ';
	var COMMENT_MODES = [
		hljs.C_LINE_COMMENT_MODE,
		hljs.COMMENT(/\{/, /\}/, {relevance: 0}),
		hljs.COMMENT(/\(\*/, /\*\)/, {relevance: 10})
	];
	var DIRECTIVE = {
		className: 'meta',
		variants: [
			{begin: /\{\$/, end: /\}/},
			{begin: /\(\*\$/, end: /\*\)/}
		]
	};
	var STRING = {
		className: 'string',
		begin: /'/, end: /'/,
		contains: [{begin: /''/}]
	};
	var CHAR_STRING = {
		className: 'string', begin: /(#\d+)+/
	};
	var CLASS = {
		begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(', returnBegin: true,
		contains: [
			hljs.TITLE_MODE
		]
	};
	var FUNCTION = {
		className: 'function',
		beginKeywords: 'function constructor destructor procedure', end: /[:;]/,
		keywords: 'function constructor|10 destructor|10 procedure|10',
		contains: [
			hljs.TITLE_MODE,
			{
				className: 'params',
				begin: /\(/, end: /\)/,
				keywords: KEYWORDS,
				contains: [STRING, CHAR_STRING, DIRECTIVE].concat(COMMENT_MODES)
			},
			DIRECTIVE
		].concat(COMMENT_MODES)
	};
	return {
		aliases: ['dpr', 'dfm', 'pas', 'pascal', 'freepascal', 'lazarus', 'lpr', 'lfm'],
		case_insensitive: true,
		keywords: KEYWORDS,
		illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
		contains: [
			STRING, CHAR_STRING,
			hljs.NUMBER_MODE,
			CLASS,
			FUNCTION,
			DIRECTIVE
		].concat(COMMENT_MODES)
	};
}
);

// #END

// === lang2/erlang.js

/*
Language: Erlang
Description: Erlang is a general-purpose functional language, with strict evaluation, single assignment, and dynamic typing.
Author: Nikolay Zakharov <nikolay.desh@gmail.com>, Dmitry Kovega <arhibot@gmail.com>
Category: functional
*/

// syntax/lang/erlang.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('erlang',
function(hljs) {
	var BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
	var FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
	var ERLANG_RESERVED = {
		keyword:
			'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if ' +
			'let not of orelse|10 query receive rem try when xor',
		literal:
			'false true'
	};

	var COMMENT = hljs.COMMENT('%', '$');
	var NUMBER = {
		className: 'number',
		begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
		relevance: 0
	};
	var NAMED_FUN = {
		begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+'
	};
	var FUNCTION_CALL = {
		begin: FUNCTION_NAME_RE + '\\(', end: '\\)',
		returnBegin: true,
		relevance: 0,
		contains: [
			{
				begin: FUNCTION_NAME_RE, relevance: 0
			},
			{
				begin: '\\(', end: '\\)', endsWithParent: true,
				returnEnd: true,
				relevance: 0
				// "contains" defined later
			}
		]
	};
	var TUPLE = {
		begin: '{', end: '}',
		relevance: 0
		// "contains" defined later
	};
	var VAR1 = {
		begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
		relevance: 0
	};
	var VAR2 = {
		begin: '[A-Z][a-zA-Z0-9_]*',
		relevance: 0
	};
	var RECORD_ACCESS = {
		begin: '#' + hljs.UNDERSCORE_IDENT_RE,
		relevance: 0,
		returnBegin: true,
		contains: [
			{
				begin: '#' + hljs.UNDERSCORE_IDENT_RE,
				relevance: 0
			},
			{
				begin: '{', end: '}',
				relevance: 0
				// "contains" defined later
			}
		]
	};

	var BLOCK_STATEMENTS = {
		beginKeywords: 'fun receive if try case', end: 'end',
		keywords: ERLANG_RESERVED
	};
	BLOCK_STATEMENTS.contains = [
		COMMENT,
		NAMED_FUN,
		hljs.inherit(hljs.APOS_STRING_MODE, {className: ''}),
		BLOCK_STATEMENTS,
		FUNCTION_CALL,
		hljs.QUOTE_STRING_MODE,
		NUMBER,
		TUPLE,
		VAR1, VAR2,
		RECORD_ACCESS
	];

	var BASIC_MODES = [
		COMMENT,
		NAMED_FUN,
		BLOCK_STATEMENTS,
		FUNCTION_CALL,
		hljs.QUOTE_STRING_MODE,
		NUMBER,
		TUPLE,
		VAR1, VAR2,
		RECORD_ACCESS
	];
	FUNCTION_CALL.contains[1].contains = BASIC_MODES;
	TUPLE.contains = BASIC_MODES;
	RECORD_ACCESS.contains[1].contains = BASIC_MODES;

	var PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)',
		contains: BASIC_MODES
	};
	return {
		aliases: ['erl'],
		keywords: ERLANG_RESERVED,
		illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
		contains: [
			{
				className: 'function',
				begin: '^' + BASIC_ATOM_RE + '\\s*\\(', end: '->',
				returnBegin: true,
				illegal: '\\(|#|//|/\\*|\\\\|:|;',
				contains: [
					PARAMS,
					hljs.inherit(hljs.TITLE_MODE, {begin: BASIC_ATOM_RE})
				],
				starts: {
					end: ';|\\.',
					keywords: ERLANG_RESERVED,
					contains: BASIC_MODES
				}
			},
			COMMENT,
			{
				begin: '^-', end: '\\.',
				relevance: 0,
				excludeEnd: true,
				returnBegin: true,
				lexemes: '-' + hljs.IDENT_RE,
				keywords:
					'-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn ' +
					'-import -include -include_lib -compile -define -else -endif -file -behaviour ' +
					'-behavior -spec',
				contains: [PARAMS]
			},
			NUMBER,
			hljs.QUOTE_STRING_MODE,
			RECORD_ACCESS,
			VAR1, VAR2,
			TUPLE,
			{begin: /\.$/} // relevance booster
		]
	};
}
);

// #END

// === lang2/fortran.js

/*
Language: Fortran
Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
Category: scientific
*/

// syntax/lang/fortran.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('fortran',
function(hljs) {
	var PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)'
	};

	var F_KEYWORDS = {
		literal: '.False. .True.',
		keyword: 'kind do while private call intrinsic where elsewhere ' +
			'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +
			'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +
			'goto save else use module select case ' +
			'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +
			'continue format pause cycle exit ' +
			'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +
			'synchronous nopass non_overridable pass protected volatile abstract extends import ' +
			'non_intrinsic value deferred generic final enumerator class associate bind enum ' +
			'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +
			'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +
			'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +
			'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +
			'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +
			'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +
			'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +
			'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +
			'integer real character complex logical dimension allocatable|10 parameter ' +
			'external implicit|10 none double precision assign intent optional pointer ' +
			'target in out common equivalence data',
		built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +
			'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +
			'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +
			'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +
			'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +
			'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +
			'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +
			'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +
			'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +
			'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +
			'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +
			'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +
			'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +
			'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +
			'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +
			'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +
			'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +
			'num_images parity popcnt poppar shifta shiftl shiftr this_image'
	};
	return {
		case_insensitive: true,
		aliases: ['f90', 'f95'],
		keywords: F_KEYWORDS,
		illegal: /\/\*/,
		contains: [
			hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
			hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),
			{
				className: 'function',
				beginKeywords: 'subroutine function program',
				illegal: '[${=\\n]',
				contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
			},
			hljs.COMMENT('!', '$', {relevance: 0}),
			{
				className: 'number',
				begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
				relevance: 0
			}
		]
	};
}
);

// #END

// === lang2/fsharp.js

/*
Language: F#
Author: Jonas Follesø <jonas@follesoe.no>
Contributors: Troy Kershaw <hello@troykershaw.com>, Henrik Feldt <henrik@haf.se>
Category: functional
*/

// syntax/lang/fsharp.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('fsharp',
function(hljs) {
	var TYPEPARAM = {
		begin: '<', end: '>',
		contains: [
			hljs.inherit(hljs.TITLE_MODE, {begin: /'[a-zA-Z0-9_]+/})
		]
	};

	return {
		aliases: ['fs'],
		keywords:
			'abstract and as assert base begin class default delegate do done ' +
			'downcast downto elif else end exception extern false finally for ' +
			'fun function global if in inherit inline interface internal lazy let ' +
			'match member module mutable namespace new null of open or ' +
			'override private public rec return sig static struct then to ' +
			'true try type upcast use val void when while with yield',
		illegal: /\/\*/,
		contains: [
			{
				// monad builder keywords (matches before non-bang kws)
				className: 'keyword',
				begin: /\b(yield|return|let|do)!/
			},
			{
				className: 'string',
				begin: '@"', end: '"',
				contains: [{begin: '""'}]
			},
			{
				className: 'string',
				begin: '"""', end: '"""'
			},
			hljs.COMMENT('\\(\\*', '\\*\\)'),
			{
				className: 'class',
				beginKeywords: 'type', end: '\\(|=|$', excludeEnd: true,
				contains: [
					hljs.UNDERSCORE_TITLE_MODE,
					TYPEPARAM
				]
			},
			{
				className: 'meta',
				begin: '\\[<', end: '>\\]',
				relevance: 10
			},
			{
				className: 'symbol',
				begin: '\\B(\'[A-Za-z])\\b',
				contains: [hljs.BACKSLASH_ESCAPE]
			},
			hljs.C_LINE_COMMENT_MODE,
			hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
			hljs.C_NUMBER_MODE
		]
	};
}
);

// #END

// === lang2/groovy.js

/*
Language: Groovy
Author: Guillaume Laforge <glaforge@gmail.com>
Description: Groovy programming language implementation inspired from Vsevolod's Java mode
Website: https://groovy-lang.org
*/

// syntax/lang/groovy.js
// HighlightJs: v.9.16.2

hljs.registerLanguage('groovy',
function(hljs) {
	return {
		keywords: {
			literal : 'true false null',
			keyword:
			'byte short char int long boolean float double void ' +
			// groovy specific keywords
			'def as in assert trait ' +
			// common keywords with Java
			'super this abstract static volatile transient public private protected synchronized final ' +
			'class interface enum if else for while switch case break default continue ' +
			'throw throws try catch finally implements extends new import package return instanceof'
		},
		contains: [
			hljs.COMMENT(
				'/\\*\\*',
				'\\*/',
				{
					relevance : 0,
					contains : [
					  {
						  // eat up @'s in emails to prevent them to be recognized as doctags
						  begin: /\w+@/, relevance: 0
					  },
					  {
						  className : 'doctag',
						  begin : '@[A-Za-z]+'
					  }
					]
				}
			),
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'string',
				begin: '"""', end: '"""'
			},
			{
				className: 'string',
				begin: "'''", end: "'''"
			},
			{
				className: 'string',
				begin: "\\$/", end: "/\\$",
				relevance: 10
			},
			hljs.APOS_STRING_MODE,
			{
				className: 'regexp',
				begin: /~?\/[^\/\n]+\//,
				contains: [
					hljs.BACKSLASH_ESCAPE
				]
			},
			hljs.QUOTE_STRING_MODE,
			{
				className: 'meta',
				begin: "^#!/usr/bin/env", end: '$',
				illegal: '\n'
			},
			hljs.BINARY_NUMBER_MODE,
			{
				className: 'class',
				beginKeywords: 'class interface trait enum', end: '{',
				illegal: ':',
				contains: [
					{beginKeywords: 'extends implements'},
					hljs.UNDERSCORE_TITLE_MODE
				]
			},
			hljs.C_NUMBER_MODE,
			{
				className: 'meta', begin: '@[A-Za-z]+'
			},
			{
				// highlight map keys and named parameters as strings
				className: 'string', begin: /[^\?]{0}[A-Za-z0-9_$]+ *:/
			},
			{
				// catch middle element of the ternary operator
				// to avoid highlight it as a label, named parameter, or map key
				begin: /\?/, end: /\:/
			},
			{
				// highlight labeled statements
				className: 'symbol', begin: '^\\s*[A-Za-z0-9_$]+:',
				relevance: 0
			}
		],
		illegal: /#|<\//
	}
}
);

// #END

// === lang2/haskell.js

/*
Language: Haskell
Author: Jeremy Hull <sourdrums@gmail.com>
Contributors: Zena Treep <zena.treep@gmail.com>
Category: functional
*/

// syntax/lang/haskell.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('haskell',
function(hljs) {
	var COMMENT = {
		variants: [
			hljs.COMMENT('--', '$'),
			hljs.COMMENT(
				'{-',
				'-}',
				{
					contains: ['self']
				}
			)
		]
	};

	var PRAGMA = {
		className: 'meta',
		begin: '{-#', end: '#-}'
	};

	var PREPROCESSOR = {
		className: 'meta',
		begin: '^#', end: '$'
	};

	var CONSTRUCTOR = {
		className: 'type',
		begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
		relevance: 0
	};

	var LIST = {
		begin: '\\(', end: '\\)',
		illegal: '"',
		contains: [
			PRAGMA,
			PREPROCESSOR,
			{className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'},
			hljs.inherit(hljs.TITLE_MODE, {begin: '[_a-z][\\w\']*'}),
			COMMENT
		]
	};

	var RECORD = {
		begin: '{', end: '}',
		contains: LIST.contains
	};

	return {
		aliases: ['hs'],
		keywords:
			'let in if then else case of where do module import hiding ' +
			'qualified type data newtype deriving class instance as default ' +
			'infix infixl infixr foreign export ccall stdcall cplusplus ' +
			'jvm dotnet safe unsafe family forall mdo proc rec',
		contains: [

			// Top-level constructions.

			{
				beginKeywords: 'module', end: 'where',
				keywords: 'module where',
				contains: [LIST, COMMENT],
				illegal: '\\W\\.|;'
			},
			{
				begin: '\\bimport\\b', end: '$',
				keywords: 'import qualified as hiding',
				contains: [LIST, COMMENT],
				illegal: '\\W\\.|;'
			},

			{
				className: 'class',
				begin: '^(\\s*)?(class|instance)\\b', end: 'where',
				keywords: 'class family instance where',
				contains: [CONSTRUCTOR, LIST, COMMENT]
			},
			{
				className: 'class',
				begin: '\\b(data|(new)?type)\\b', end: '$',
				keywords: 'data family type newtype deriving',
				contains: [PRAGMA, CONSTRUCTOR, LIST, RECORD, COMMENT]
			},
			{
				beginKeywords: 'default', end: '$',
				contains: [CONSTRUCTOR, LIST, COMMENT]
			},
			{
				beginKeywords: 'infix infixl infixr', end: '$',
				contains: [hljs.C_NUMBER_MODE, COMMENT]
			},
			{
				begin: '\\bforeign\\b', end: '$',
				keywords: 'foreign import export ccall stdcall cplusplus jvm ' +
									'dotnet safe unsafe',
				contains: [CONSTRUCTOR, hljs.QUOTE_STRING_MODE, COMMENT]
			},
			{
				className: 'meta',
				begin: '#!\\/usr\\/bin\\/env\ runhaskell', end: '$'
			},

			// "Whitespaces".

			PRAGMA,
			PREPROCESSOR,

			// Literals and names.

			// TODO: characters.
			hljs.QUOTE_STRING_MODE,
			hljs.C_NUMBER_MODE,
			CONSTRUCTOR,
			hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\w\']*'}),

			COMMENT,

			{begin: '->|<-'} // No markup, relevance booster
		]
	};
}
);

// #END

// === lang2/haxe.js

/*
Language: Haxe
Author: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)
Contributors: Kenton Hamaluik <kentonh@gmail.com>
*/

// syntax/lang/haxe.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('haxe',
function(hljs) {
	var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
	var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';

	var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';

	return {
		aliases: ['hx'],
		keywords: {
			keyword: 'break case cast catch continue default do dynamic else enum extern ' +
							 'for function here if import in inline never new override package private get set ' +
							 'public return static super switch this throw trace try typedef untyped using var while ' +
							 HAXE_BASIC_TYPES,
			built_in:
				'trace this',
			literal:
				'true false null _'
		},
		contains: [
			{ className: 'string', // interpolate-able strings
				begin: '\'', end: '\'',
				contains: [
					hljs.BACKSLASH_ESCAPE,
					{ className: 'subst', // interpolation
						begin: '\\$\\{', end: '\\}'
					},
					{ className: 'subst', // interpolation
						begin: '\\$', end: '\\W}'
					}
				]
			},
			hljs.QUOTE_STRING_MODE,
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			hljs.C_NUMBER_MODE,
			{ className: 'meta', // compiler meta
				begin: '@:', end: '$'
			},
			{ className: 'meta', // compiler conditionals
				begin: '#', end: '$',
				keywords: {'meta-keyword': 'if else elseif end error'}
			},
			{ className: 'type', // function types
				begin: ':[ \t]*', end: '[^A-Za-z0-9_ \t\\->]',
				excludeBegin: true, excludeEnd: true,
				relevance: 0
			},
			{ className: 'type', // types
				begin: ':[ \t]*', end: '\\W',
				excludeBegin: true, excludeEnd: true
			},
			{ className: 'type', // instantiation
				begin: 'new *', end: '\\W',
				excludeBegin: true, excludeEnd: true
			},
			{ className: 'class', // enums
				beginKeywords: 'enum', end: '\\{',
				contains: [
					hljs.TITLE_MODE
				]
			},
			{ className: 'class', // abstracts
				beginKeywords: 'abstract', end: '[\\{$]',
				contains: [
					{ className: 'type',
						begin: '\\(', end: '\\)',
						excludeBegin: true, excludeEnd: true
					},
					{ className: 'type',
						begin: 'from +', end: '\\W',
						excludeBegin: true, excludeEnd: true
					},
					{ className: 'type',
						begin: 'to +', end: '\\W',
						excludeBegin: true, excludeEnd: true
					},
					hljs.TITLE_MODE
				],
				keywords: {
					keyword: 'abstract from to'
				}
			},
			{ className: 'class', // classes
				begin: '\\b(class|interface) +', end: '[\\{$]',  excludeEnd: true,
				keywords: 'class interface',
				contains: [
					{ className: 'keyword',
						begin: '\\b(extends|implements) +',
						keywords: 'extends implements',
						contains: [
							{
								className: 'type',
								begin: hljs.IDENT_RE,
								relevance: 0
							}
						]
					},
					hljs.TITLE_MODE
				]
			},
			{ className: 'function',
				beginKeywords: 'function', end: '\\(', excludeEnd: true,
				illegal: '\\S',
				contains: [
					hljs.TITLE_MODE
				]
			}
		],
		illegal: /<\//
	};
}
);

// #END

// === lang2/java.js

/*
Language: Java
Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
Category: common, enterprise
*/

// syntax/lang/java.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('java',
function(hljs) {
	var JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
	var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\s*,\\s*' + JAVA_IDENT_RE + ')*>)?';
	var KEYWORDS =
		'false synchronized int abstract float private char boolean var static null if const ' +
		'for true while long strictfp finally protected import native final void ' +
		'enum else break transient catch instanceof byte super volatile case assert short ' +
		'package default double public try this switch continue throws protected public private ' +
		'module requires exports do';

	// https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html
	var JAVA_NUMBER_RE = '\\b' +
		'(' +
			'0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...
			'|' +
			'0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...
			'|' +
			'(' +
				'([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?' +
				'|' +
				'\\.([\\d]+[\\d_]+[\\d]+|[\\d]+)' +
			')' +
			'([eE][-+]?\\d+)?' + // octal, decimal, float
		')' +
		'[lLfF]?';
	var JAVA_NUMBER_MODE = {
		className: 'number',
		begin: JAVA_NUMBER_RE,
		relevance: 0
	};

	return {
		aliases: ['jsp'],
		keywords: KEYWORDS,
		illegal: /<\/|#/,
		contains: [
			hljs.COMMENT(
				'/\\*\\*',
				'\\*/',
				{
					relevance : 0,
					contains : [
						{
							// eat up @'s in emails to prevent them to be recognized as doctags
							begin: /\w+@/, relevance: 0
						},
						{
							className : 'doctag',
							begin : '@[A-Za-z]+'
						}
					]
				}
			),
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE,
			{
				className: 'class',
				beginKeywords: 'class interface', end: /[{;=]/, excludeEnd: true,
				keywords: 'class interface',
				illegal: /[:"\[\]]/,
				contains: [
					{beginKeywords: 'extends implements'},
					hljs.UNDERSCORE_TITLE_MODE
				]
			},
			{
				// Expression keywords prevent 'keyword Name(...)' from being
				// recognized as a function definition
				beginKeywords: 'new throw return else',
				relevance: 0
			},
			{
				className: 'function',
				begin: '(' + GENERIC_IDENT_RE + '\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true, end: /[{;=]/,
				excludeEnd: true,
				keywords: KEYWORDS,
				contains: [
					{
						begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
						relevance: 0,
						contains: [hljs.UNDERSCORE_TITLE_MODE]
					},
					{
						className: 'params',
						begin: /\(/, end: /\)/,
						keywords: KEYWORDS,
						relevance: 0,
						contains: [
							hljs.APOS_STRING_MODE,
							hljs.QUOTE_STRING_MODE,
							hljs.C_NUMBER_MODE,
							hljs.C_BLOCK_COMMENT_MODE
						]
					},
					hljs.C_LINE_COMMENT_MODE,
					hljs.C_BLOCK_COMMENT_MODE
				]
			},
			JAVA_NUMBER_MODE,
			{
				className: 'meta', begin: '@[A-Za-z]+'
			}
		]
	};
}
);

// #END

// === lang2/kotlin.js

/*
Language: Kotlin
Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.
Author: Sergey Mashkov <cy6erGn0m@gmail.com>
Website: https://kotlinlang.org
Category: common
*/

// syntax/lang/kotlin.js
// HighlightJs: v.9.16.2

hljs.registerLanguage('kotlin',
function(hljs) {
	var KEYWORDS = {
		keyword:
			'abstract as val var vararg get set class object open private protected public noinline ' +
			'crossinline dynamic final enum if else do while for when throw try catch finally ' +
			'import package is in fun override companion reified inline lateinit init ' +
			'interface annotation data sealed internal infix operator out by constructor super ' +
			'tailrec where const inner suspend typealias external expect actual ' +
			// to be deleted soon
			'trait volatile transient native default',
		built_in:
			'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
		literal:
			'true false null'
	};
	var KEYWORDS_WITH_LABEL = {
		className: 'keyword',
		begin: /\b(break|continue|return|this)\b/,
		starts: {
			contains: [
				{
					className: 'symbol',
					begin: /@\w+/
				}
			]
		}
	};
	var LABEL = {
		className: 'symbol', begin: hljs.UNDERSCORE_IDENT_RE + '@'
	};

	// for string templates
	var SUBST = {
		className: 'subst',
		begin: '\\${', end: '}', contains: [hljs.C_NUMBER_MODE]
	};
	var VARIABLE = {
		className: 'variable', begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
	};
	var STRING = {
		className: 'string',
		variants: [
			{
				begin: '"""', end: '"""',
				contains: [VARIABLE, SUBST]
			},
			// Can't use built-in modes easily, as we want to use STRING in the meta
			// context as 'meta-string' and there's no syntax to remove explicitly set
			// classNames in built-in modes.
			{
				begin: '\'', end: '\'',
				illegal: /\n/,
				contains: [hljs.BACKSLASH_ESCAPE]
			},
			{
				begin: '"', end: '"',
				illegal: /\n/,
				contains: [hljs.BACKSLASH_ESCAPE, VARIABLE, SUBST]
			}
		]
	};
	SUBST.contains.push(STRING)

	var ANNOTATION_USE_SITE = {
		className: 'meta', begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
	};
	var ANNOTATION = {
		className: 'meta', begin: '@' + hljs.UNDERSCORE_IDENT_RE,
		contains: [
			{
				begin: /\(/, end: /\)/,
				contains: [
					hljs.inherit(STRING, {className: 'meta-string'})
				]
			}
		]
	};

	// https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals
	// According to the doc above, the number mode of kotlin is the same as java 8,
	// so the code below is copied from java.js
	var KOTLIN_NUMBER_RE = '\\b' +
		'(' +
			'0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...
			'|' +
			'0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...
			'|' +
			'(' +
				'([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?' +
				'|' +
				'\\.([\\d]+[\\d_]+[\\d]+|[\\d]+)' +
			')' +
			'([eE][-+]?\\d+)?' + // octal, decimal, float
		')' +
		'[lLfF]?';
	var KOTLIN_NUMBER_MODE = {
		className: 'number',
		begin: KOTLIN_NUMBER_RE,
		relevance: 0
	};
	var KOTLIN_NESTED_COMMENT = hljs.COMMENT(
		'/\\*', '\\*/',
		{ contains: [ hljs.C_BLOCK_COMMENT_MODE ] }
	);
	var KOTLIN_PAREN_TYPE = {
		variants: [
		{ className: 'type',
			begin: hljs.UNDERSCORE_IDENT_RE
		},
		{ begin: /\(/, end: /\)/,
			contains: [] //defined later
		}
	]
	};
	var KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
	KOTLIN_PAREN_TYPE2.variants[1].contains = [ KOTLIN_PAREN_TYPE ];
	KOTLIN_PAREN_TYPE.variants[1].contains = [ KOTLIN_PAREN_TYPE2 ];

	return {
		aliases: ['kt'],
		keywords: KEYWORDS,
		contains : [
			hljs.COMMENT(
				'/\\*\\*',
				'\\*/',
				{
					relevance : 0,
					contains : [{
						className : 'doctag',
						begin : '@[A-Za-z]+'
					}]
				}
			),
			hljs.C_LINE_COMMENT_MODE,
			KOTLIN_NESTED_COMMENT,
			KEYWORDS_WITH_LABEL,
			LABEL,
			ANNOTATION_USE_SITE,
			ANNOTATION,
			{
				className: 'function',
				beginKeywords: 'fun', end: '[(]|$',
				returnBegin: true,
				excludeEnd: true,
				keywords: KEYWORDS,
				illegal: /fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,
				relevance: 5,
				contains: [
					{
						begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
						relevance: 0,
						contains: [hljs.UNDERSCORE_TITLE_MODE]
					},
					{
						className: 'type',
						begin: /</, end: />/, keywords: 'reified',
						relevance: 0
					},
					{
						className: 'params',
						begin: /\(/, end: /\)/,
						endsParent: true,
						keywords: KEYWORDS,
						relevance: 0,
						contains: [
							{
								begin: /:/, end: /[=,\/]/, endsWithParent: true,
								contains: [
									KOTLIN_PAREN_TYPE,
									hljs.C_LINE_COMMENT_MODE,
									KOTLIN_NESTED_COMMENT
								],
								relevance: 0
							},
							hljs.C_LINE_COMMENT_MODE,
							KOTLIN_NESTED_COMMENT,
							ANNOTATION_USE_SITE,
							ANNOTATION,
							STRING,
							hljs.C_NUMBER_MODE
						]
					},
					KOTLIN_NESTED_COMMENT
				]
			},
			{
				className: 'class',
				beginKeywords: 'class interface trait', end: /[:\{(]|$/, // remove 'trait' when removed from KEYWORDS
				excludeEnd: true,
				illegal: 'extends implements',
				contains: [
					{beginKeywords: 'public protected internal private constructor'},
					hljs.UNDERSCORE_TITLE_MODE,
					{
						className: 'type',
						begin: /</, end: />/, excludeBegin: true, excludeEnd: true,
						relevance: 0
					},
					{
						className: 'type',
						begin: /[,:]\s*/, end: /[<\(,]|$/, excludeBegin: true, returnEnd: true
					},
					ANNOTATION_USE_SITE,
					ANNOTATION
				]
			},
			STRING,
			{
				className: 'meta',
				begin: "^#!/usr/bin/env", end: '$',
				illegal: '\n'
			},
			KOTLIN_NUMBER_MODE
		]
	};
}
);

// #END

// === lang2/objectivec.js

/*
Language: Objective-C
Author: Valerii Hiora <valerii.hiora@gmail.com>
Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
Category: common
*/

// syntax/lang/objectivec.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('objectivec',
function(hljs) {
	var API_CLASS = {
		className: 'built_in',
		begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+',
	};
	var OBJC_KEYWORDS = {
		keyword:
			'int float while char export sizeof typedef const struct for union ' +
			'unsigned long volatile static bool mutable if do return goto void ' +
			'enum else break extern asm case short default double register explicit ' +
			'signed typename this switch continue wchar_t inline readonly assign ' +
			'readwrite self @synchronized id typeof ' +
			'nonatomic super unichar IBOutlet IBAction strong weak copy ' +
			'in out inout bycopy byref oneway __strong __weak __block __autoreleasing ' +
			'@private @protected @public @try @property @end @throw @catch @finally ' +
			'@autoreleasepool @synthesize @dynamic @selector @optional @required ' +
			'@encode @package @import @defs @compatibility_alias ' +
			'__bridge __bridge_transfer __bridge_retained __bridge_retain ' +
			'__covariant __contravariant __kindof ' +
			'_Nonnull _Nullable _Null_unspecified ' +
			'__FUNCTION__ __PRETTY_FUNCTION__ __attribute__ ' +
			'getter setter retain unsafe_unretained ' +
			'nonnull nullable null_unspecified null_resettable class instancetype ' +
			'NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER ' +
			'NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED ' +
			'NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE ' +
			'NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END ' +
			'NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW ' +
			'NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN',
		literal:
			'false true FALSE TRUE nil YES NO NULL',
		built_in:
			'BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once'
	};
	var LEXEMES = /[a-zA-Z@][a-zA-Z0-9_]*/;
	var CLASS_KEYWORDS = '@interface @class @protocol @implementation';
	return {
		aliases: ['mm', 'objc', 'obj-c'],
		keywords: OBJC_KEYWORDS,
		lexemes: LEXEMES,
		illegal: '</',
		contains: [
			API_CLASS,
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			hljs.C_NUMBER_MODE,
			hljs.QUOTE_STRING_MODE,
			{
				className: 'string',
				variants: [
					{
						begin: '@"', end: '"',
						illegal: '\\n',
						contains: [hljs.BACKSLASH_ESCAPE]
					},
					{
						begin: '\'', end: '[^\\\\]\'',
						illegal: '[^\\\\][^\']'
					}
				]
			},
			{
				className: 'meta',
				begin: '#',
				end: '$',
				contains: [
					{
						className: 'meta-string',
						variants: [
							{ begin: '\"', end: '\"' },
							{ begin: '<', end: '>' }
						]
					}
				]
			},
			{
				className: 'class',
				begin: '(' + CLASS_KEYWORDS.split(' ').join('|') + ')\\b', end: '({|$)', excludeEnd: true,
				keywords: CLASS_KEYWORDS, lexemes: LEXEMES,
				contains: [
					hljs.UNDERSCORE_TITLE_MODE
				]
			},
			{
				begin: '\\.'+hljs.UNDERSCORE_IDENT_RE,
				relevance: 0
			}
		]
	};
}
);

// #END

// === lang2/ocaml.js

/*
Language: OCaml
Author: Mehdi Dogguy <mehdi@dogguy.org>
Contributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>
Description: OCaml language definition.
Category: functional
*/

// syntax/lang/ocaml.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('ocaml',
function(hljs) {
	/* missing support for heredoc-like string (OCaml 4.0.2+) */
	return {
		aliases: ['ml'],
		keywords: {
			keyword:
				'and as assert asr begin class constraint do done downto else end ' +
				'exception external for fun function functor if in include ' +
				'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +
				'mod module mutable new object of open! open or private rec sig struct ' +
				'then to try type val! val virtual when while with ' +
				/* camlp4 */
				'parser value',
			built_in:
				/* built-in types */
				'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +
				/* (some) types in Pervasives */
				'in_channel out_channel ref',
			literal:
				'true false'
		},
		illegal: /\/\/|>>/,
		lexemes: '[a-z_]\\w*!?',
		contains: [
			{
				className: 'literal',
				begin: '\\[(\\|\\|)?\\]|\\(\\)',
				relevance: 0
			},
			hljs.COMMENT(
				'\\(\\*',
				'\\*\\)',
				{
					contains: ['self']
				}
			),
			{ /* type variable */
				className: 'symbol',
				begin: '\'[A-Za-z_](?!\')[\\w\']*'
				/* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
			},
			{ /* polymorphic variant */
				className: 'type',
				begin: '`[A-Z][\\w\']*'
			},
			{ /* module or constructor */
				className: 'type',
				begin: '\\b[A-Z][\\w\']*',
				relevance: 0
			},
			{ /* don't color identifiers, but safely catch all identifiers with '*/
				begin: '[a-z_]\\w*\'[\\w\']*', relevance: 0
			},
			hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
			hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
			{
				className: 'number',
				begin:
					'\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +
					'0[oO][0-7_]+[Lln]?|' +
					'0[bB][01_]+[Lln]?|' +
					'[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
				relevance: 0
			},
			{
				begin: /[-=]>/ // relevance booster
			}
		]
	}
}
);

// #END

// === lang2/openscad.js

/*
Language: OpenSCAD
Author: Dan Panzarella <alsoelp@gmail.com>
Description: OpenSCAD is a language for the 3D CAD modeling software of the same name.
Category: scientific
*/

// syntax/lang/openscad.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('openscad',
function(hljs) {
	var SPECIAL_VARS = {
		className: 'keyword',
		begin: '\\$(f[asn]|t|vp[rtd]|children)'
	},
	LITERALS = {
		className: 'literal',
		begin: 'false|true|PI|undef'
	},
	NUMBERS = {
		className: 'number',
		begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', //adds 1e5, 1e-10
		relevance: 0
	},
	STRING = hljs.inherit(hljs.QUOTE_STRING_MODE,{illegal: null}),
	PREPRO = {
		className: 'meta',
		keywords: {'meta-keyword': 'include use'},
		begin: 'include|use <',
		end: '>'
	},
	PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)',
		contains: ['self', NUMBERS, STRING, SPECIAL_VARS, LITERALS]
	},
	MODIFIERS = {
		begin: '[*!#%]',
		relevance: 0
	},
	FUNCTIONS = {
		className: 'function',
		beginKeywords: 'module function',
		end: '\\=|\\{',
		contains: [PARAMS, hljs.UNDERSCORE_TITLE_MODE]
	};

	return {
		aliases: ['scad'],
		keywords: {
			keyword: 'function module include use for intersection_for if else \\%',
			literal: 'false true PI undef',
			built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
		},
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			NUMBERS,
			PREPRO,
			STRING,
			SPECIAL_VARS,
			MODIFIERS,
			FUNCTIONS
		]
	}
}
);

// #END

// === lang2/r.js

/*
Language: R
Author: Joe Cheng <joe@rstudio.org>
Category: scientific
*/

// syntax/lang/r.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('r',
function(hljs) {
	var IDENT_RE = '([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*';

	return {
		contains: [
			hljs.HASH_COMMENT_MODE,
			{
				begin: IDENT_RE,
				lexemes: IDENT_RE,
				keywords: {
					keyword:
						'function if in break next repeat else for return switch while try tryCatch ' +
						'stop warning require library attach detach source setMethod setGeneric ' +
						'setGroupGeneric setClass ...',
					literal:
						'NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 ' +
						'NA_complex_|10'
				},
				relevance: 0
			},
			{
				// hex value
				className: 'number',
				begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
				relevance: 0
			},
			{
				// explicit integer
				className: 'number',
				begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
				relevance: 0
			},
			{
				// number with trailing decimal
				className: 'number',
				begin: "\\d+\\.(?!\\d)(?:i\\b)?",
				relevance: 0
			},
			{
				// number
				className: 'number',
				begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
				relevance: 0
			},
			{
				// number with leading decimal
				className: 'number',
				begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
				relevance: 0
			},

			{
				// escaped identifier
				begin: '`',
				end: '`',
				relevance: 0
			},

			{
				className: 'string',
				contains: [hljs.BACKSLASH_ESCAPE],
				variants: [
					{begin: '"', end: '"'},
					{begin: "'", end: "'"}
				]
			}
		]
	};
}
);

// #END

// === lang2/scala.js

/*
Language: Scala
Category: functional
Author: Jan Berkel <jan.berkel@gmail.com>
Contributors: Erik Osheim <d_m@plastic-idolatry.com>
*/

// syntax/lang/scala.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('scala',
function(hljs) {

	var ANNOTATION = { className: 'meta', begin: '@[A-Za-z]+' };

	// used in strings for escaping/interpolation/substitution
	var SUBST = {
		className: 'subst',
		variants: [
			{begin: '\\$[A-Za-z0-9_]+'},
			{begin: '\\${', end: '}'}
		]
	};

	var STRING = {
		className: 'string',
		variants: [
			{
				begin: '"', end: '"',
				illegal: '\\n',
				contains: [hljs.BACKSLASH_ESCAPE]
			},
			{
				begin: '"""', end: '"""',
				relevance: 10
			},
			{
				begin: '[a-z]+"', end: '"',
				illegal: '\\n',
				contains: [hljs.BACKSLASH_ESCAPE, SUBST]
			},
			{
				className: 'string',
				begin: '[a-z]+"""', end: '"""',
				contains: [SUBST],
				relevance: 10
			}
		]

	};

	var SYMBOL = {
		className: 'symbol',
		begin: '\'\\w[\\w\\d_]*(?!\')'
	};

	var TYPE = {
		className: 'type',
		begin: '\\b[A-Z][A-Za-z0-9_]*',
		relevance: 0
	};

	var NAME = {
		className: 'title',
		begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
		relevance: 0
	};

	var CLASS = {
		className: 'class',
		beginKeywords: 'class object trait type',
		end: /[:={\[\n;]/,
		excludeEnd: true,
		contains: [
			{
				beginKeywords: 'extends with',
				relevance: 10
			},
			{
				begin: /\[/,
				end: /\]/,
				excludeBegin: true,
				excludeEnd: true,
				relevance: 0,
				contains: [TYPE]
			},
			{
				className: 'params',
				begin: /\(/,
				end: /\)/,
				excludeBegin: true,
				excludeEnd: true,
				relevance: 0,
				contains: [TYPE]
			},
			NAME
		]
	};

	var METHOD = {
		className: 'function',
		beginKeywords: 'def',
		end: /[:={\[(\n;]/,
		excludeEnd: true,
		contains: [NAME]
	};

	return {
		keywords: {
			literal: 'true false null',
			keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'
		},
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			STRING,
			SYMBOL,
			TYPE,
			METHOD,
			CLASS,
			hljs.C_NUMBER_MODE,
			ANNOTATION
		]
	};
}
);

// #END

// === lang2/scheme.js

/*
Language: Scheme
Description: Scheme is a programming language in the Lisp family.
						 (keywords based on http://community.schemewiki.org/?scheme-keywords)
Author: JP Verkamp <me@jverkamp.com>
Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
Origin: clojure.js
Website: http://community.schemewiki.org/?what-is-scheme
Category: lisp
*/

// syntax/lang/scheme.js
// HighlightJs: v.9.18.5

hljs.registerLanguage('scheme',
function(hljs) {
	var SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
	var SCHEME_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+([./]\\d+)?';
	var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
	var BUILTINS = {
		'builtin-name':
			'case-lambda call/cc class define-class exit-handler field import ' +
			'inherit init-field interface let*-values let-values let/ec mixin ' +
			'opt-lambda override protect provide public rename require ' +
			'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +
			'when with-syntax and begin call-with-current-continuation ' +
			'call-with-input-file call-with-output-file case cond define ' +
			'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +
			'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / ' +
			'; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +
			'boolean? caar cadr call-with-input-file call-with-output-file ' +
			'call-with-values car cdddar cddddr cdr ceiling char->integer ' +
			'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +
			'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +
			'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +
			'char? close-input-port close-output-port complex? cons cos ' +
			'current-input-port current-output-port denominator display eof-object? ' +
			'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +
			'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +
			'integer? interaction-environment lcm length list list->string ' +
			'list->vector list-ref list-tail list? load log magnitude make-polar ' +
			'make-rectangular make-string make-vector max member memq memv min ' +
			'modulo negative? newline not null-environment null? number->string ' +
			'number? numerator odd? open-input-file open-output-file output-port? ' +
			'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +
			'rational? rationalize read read-char real-part real? remainder reverse ' +
			'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +
			'string->list string->number string->symbol string-append string-ci<=? ' +
			'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +
			'string-fill! string-length string-ref string-set! string<=? string<? ' +
			'string=? string>=? string>? string? substring symbol->string symbol? ' +
			'tan transcript-off transcript-on truncate values vector ' +
			'vector->list vector-fill! vector-length vector-ref vector-set! ' +
			'with-input-from-file with-output-to-file write write-char zero?'
	};

	var SHEBANG = {
		className: 'meta',
		begin: '^#!',
		end: '$'
	};

	var LITERAL = {
		className: 'literal',
		begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
	};

	var NUMBER = {
		className: 'number',
		variants: [
			{ begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },
			{ begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },
			{ begin: '#b[0-1]+(/[0-1]+)?' },
			{ begin: '#o[0-7]+(/[0-7]+)?' },
			{ begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }
		]
	};

	var STRING = hljs.QUOTE_STRING_MODE;

	var REGULAR_EXPRESSION = {
		className: 'regexp',
		begin: '#[pr]x"',
		end: '[^\\\\]"'
	};

	var COMMENT_MODES = [
		hljs.COMMENT(
			';',
			'$',
			{
				relevance: 0
			}
		),
		hljs.COMMENT('#\\|', '\\|#')
	];

	var IDENT = {
		begin: SCHEME_IDENT_RE,
		relevance: 0
	};

	var QUOTED_IDENT = {
		className: 'symbol',
		begin: '\'' + SCHEME_IDENT_RE
	};

	var BODY = {
		endsWithParent: true,
		relevance: 0
	};

	var QUOTED_LIST = {
		variants: [
			{ begin: /'/ },
			{ begin: '`' }
		],
		contains: [
			{
				begin: '\\(', end: '\\)',
				contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]
			}
		]
	};

	var NAME = {
		className: 'name',
		begin: SCHEME_IDENT_RE,
		lexemes: SCHEME_IDENT_RE,
		keywords: BUILTINS
	};

	var LAMBDA = {
		begin: /lambda/, endsWithParent: true, returnBegin: true,
		contains: [
			NAME,
			{
				begin: /\(/, end: /\)/, endsParent: true,
				contains: [IDENT],
			}
		]
	};

	var LIST = {
		variants: [
			{ begin: '\\(', end: '\\)' },
			{ begin: '\\[', end: '\\]' }
		],
		contains: [LAMBDA, NAME, BODY]
	};

	BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);

	return {
		illegal: /\S/,
		contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)
	};
}
);

// #END

// === lang2/swift.js

/*
Language: Swift
Author: Chris Eidhof <chris@eidhof.nl>
Contributors: Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>
Category: system
*/

// syntax/lang/swift.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('swift',
function(hljs) {
	var SWIFT_KEYWORDS = {
			keyword: '#available #colorLiteral #column #else #elseif #endif #file ' +
				'#fileLiteral #function #if #imageLiteral #line #selector #sourceLocation ' +
				'_ __COLUMN__ __FILE__ __FUNCTION__ __LINE__ Any as as! as? associatedtype ' +
				'associativity break case catch class continue convenience default defer deinit didSet do ' +
				'dynamic dynamicType else enum extension fallthrough false fileprivate final for func ' +
				'get guard if import in indirect infix init inout internal is lazy left let ' +
				'mutating nil none nonmutating open operator optional override postfix precedence ' +
				'prefix private protocol Protocol public repeat required rethrows return ' +
				'right self Self set static struct subscript super switch throw throws true ' +
				'try try! try? Type typealias unowned var weak where while willSet',
			literal: 'true false nil',
			built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' +
				'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' +
				'bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros ' +
				'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' +
				'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' +
				'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' +
				'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' +
				'map max maxElement min minElement numericCast overlaps partition posix ' +
				'precondition preconditionFailure print println quickSort readLine reduce reflect ' +
				'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' +
				'startsWith stride strideof strideofValue swap toString transcode ' +
				'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' +
				'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' +
				'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' +
				'withUnsafePointer withUnsafePointers withVaList zip'
		};

	var TYPE = {
		className: 'type',
		begin: '\\b[A-Z][\\w\u00C0-\u02B8\']*',
		relevance: 0
	};
	var BLOCK_COMMENT = hljs.COMMENT(
		'/\\*',
		'\\*/',
		{
			contains: ['self']
		}
	);
	var SUBST = {
		className: 'subst',
		begin: /\\\(/, end: '\\)',
		keywords: SWIFT_KEYWORDS,
		contains: [] // assigned later
	};
	var STRING = {
		className: 'string',
		contains: [hljs.BACKSLASH_ESCAPE, SUBST],
		variants: [
			{begin: /"""/, end: /"""/},
			{begin: /"/, end: /"/},
		]
	};
	var NUMBERS = {
			className: 'number',
			begin: '\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b',
			relevance: 0
	};
	SUBST.contains = [NUMBERS];

	return {
		keywords: SWIFT_KEYWORDS,
		contains: [
			STRING,
			hljs.C_LINE_COMMENT_MODE,
			BLOCK_COMMENT,
			TYPE,
			NUMBERS,
			{
				className: 'function',
				beginKeywords: 'func', end: '{', excludeEnd: true,
				contains: [
					hljs.inherit(hljs.TITLE_MODE, {
						begin: /[A-Za-z$_][0-9A-Za-z$_]*/
					}),
					{
						begin: /</, end: />/
					},
					{
						className: 'params',
						begin: /\(/, end: /\)/, endsParent: true,
						keywords: SWIFT_KEYWORDS,
						contains: [
							'self',
							NUMBERS,
							STRING,
							hljs.C_BLOCK_COMMENT_MODE,
							{begin: ':'} // relevance booster
						],
						illegal: /["']/
					}
				],
				illegal: /\[|%/
			},
			{
				className: 'class',
				beginKeywords: 'struct protocol class extension enum',
				keywords: SWIFT_KEYWORDS,
				end: '\\{',
				excludeEnd: true,
				contains: [
					hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})
				]
			},
			{
				className: 'meta', // @attributes
				begin: '(@discardableResult|@warn_unused_result|@exported|@lazy|@noescape|' +
									'@NSCopying|@NSManaged|@objc|@objcMembers|@convention|@required|' +
									'@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' +
									'@infix|@prefix|@postfix|@autoclosure|@testable|@available|' +
									'@nonobjc|@NSApplicationMain|@UIApplicationMain)'

			},
			{
				beginKeywords: 'import', end: /$/,
				contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]
			}
		]
	};
}
);

// #END

// === ms/dos.js

/*
Language: DOS .bat
Author: Alexander Makarov <sam@rmcreative.ru>
Contributors: Anton Kochkov <anton.kochkov@gmail.com>
*/

// syntax/ms/dos.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('dos',
function(hljs) {
	var COMMENT = hljs.COMMENT(
		/^\s*@?rem\b/, /$/,
		{
			relevance: 10
		}
	);
	var LABEL = {
		className: 'symbol',
		begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
		relevance: 0
	};
	return {
		aliases: ['bat', 'cmd'],
		case_insensitive: true,
		illegal: /\/\*/,
		keywords: {
			keyword:
				'if else goto for in do call exit not exist errorlevel defined ' +
				'equ neq lss leq gtr geq',
			built_in:
				'prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux ' +
				'shift cd dir echo setlocal endlocal set pause copy ' +
				'append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color ' +
				'comp compact convert date dir diskcomp diskcopy doskey erase fs ' +
				'find findstr format ftype graftabl help keyb label md mkdir mode more move path ' +
				'pause print popd pushd promt rd recover rem rename replace restore rmdir shift' +
				'sort start subst time title tree type ver verify vol ' +
				// winutils
				'ping net ipconfig taskkill xcopy ren del'
		},
		contains: [
			{
				className: 'variable', begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
			},
			{
				className: 'function',
				begin: LABEL.begin, end: 'goto:eof',
				contains: [
					hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
					COMMENT
				]
			},
			{
				className: 'number', begin: '\\b\\d+',
				relevance: 0
			},
			COMMENT
		]
	};
}
);

// #END

// === ms/powershell.js

/*
Language: PowerShell
Author: David Mohundro <david@mohundro.com>
Contributors: Nicholas Blumhardt <nblumhardt@nblumhardt.com>, Victor Zhou <OiCMudkips@users.noreply.github.com>, Nicolas Le Gall <contact@nlegall.fr>
*/

// syntax/ms/powershell.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('powershell',
function(hljs) {
	var BACKTICK_ESCAPE = {
		begin: '`[\\s\\S]',
		relevance: 0
	};
	var VAR = {
		className: 'variable',
		variants: [
			{begin: /\$[\w\d][\w\d_:]*/}
		]
	};
	var LITERAL = {
		className: 'literal',
		begin: /\$(null|true|false)\b/
	};
	var QUOTE_STRING = {
		className: 'string',
		variants: [
			{ begin: /"/, end: /"/ },
			{ begin: /@"/, end: /^"@/ }
		],
		contains: [
			BACKTICK_ESCAPE,
			VAR,
			{
				className: 'variable',
				begin: /\$[A-z]/, end: /[^A-z]/
			}
		]
	};
	var APOS_STRING = {
		className: 'string',
		variants: [
			{ begin: /'/, end: /'/ },
			{ begin: /@'/, end: /^'@/ }
		]
	};

	var PS_HELPTAGS = {
		className: 'doctag',
		variants: [
			/* no paramater help tags */
			{ begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
			/* one parameter help tags */
			{ begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
		]
	};
	var PS_COMMENT = hljs.inherit(
		hljs.COMMENT(null, null),
		{
			variants: [
				/* single-line comment */
				{ begin: /#/, end: /$/ },
				/* multi-line comment */
				{ begin: /<#/, end: /#>/ }
			],
			contains: [PS_HELPTAGS]
		}
	);

	return {
		aliases: ['ps'],
		lexemes: /-?[A-z\.\-]+/,
		case_insensitive: true,
		keywords: {
			keyword: 'if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch',
			built_in: 'Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct',
			nomarkup: '-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace'
		},
		contains: [
			BACKTICK_ESCAPE,
			hljs.NUMBER_MODE,
			QUOTE_STRING,
			APOS_STRING,
			LITERAL,
			VAR,
			PS_COMMENT
		]
	};
}
);

// #END

// === ms/typescript.js

/*
Language: TypeScript
Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
Contributors: Ike Ku <dempfi@yahoo.com>
Description: TypeScript is a strict superset of JavaScript
Category: scripting
*/

// syntax/ms/typescript.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('typescript',
function(hljs) {
	var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	var KEYWORDS = {
		keyword:
			'in if for while finally var new function do return void else break catch ' +
			'instanceof with throw case default try this switch continue typeof delete ' +
			'let yield const class public private protected get set super ' +
			'static implements enum export import declare type namespace abstract ' +
			'as from extends async await',
		literal:
			'true false null undefined NaN Infinity',
		built_in:
			'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
			'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
			'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
			'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
			'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
			'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
			'module console window document any number boolean string void Promise'
	};

	var DECORATOR = {
		className: 'meta',
		begin: '@' + JS_IDENT_RE,
	};

	var ARGS =
	{
		begin: '\\(',
		end: /\)/,
		keywords: KEYWORDS,
		contains: [
			'self',
			hljs.QUOTE_STRING_MODE,
			hljs.APOS_STRING_MODE,
			hljs.NUMBER_MODE
		]
	};

	var PARAMS = {
		className: 'params',
		begin: /\(/, end: /\)/,
		excludeBegin: true,
		excludeEnd: true,
		keywords: KEYWORDS,
		contains: [
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			DECORATOR,
			ARGS
		]
	};

	return {
		aliases: ['ts'],
		keywords: KEYWORDS,
		contains: [
			{
				className: 'meta',
				begin: /^\s*['"]use strict['"]/
			},
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE,
			{ // template string
				className: 'string',
				begin: '`', end: '`',
				contains: [
					hljs.BACKSLASH_ESCAPE,
					{
						className: 'subst',
						begin: '\\$\\{', end: '\\}'
					}
				]
			},
			hljs.C_LINE_COMMENT_MODE,
			hljs.C_BLOCK_COMMENT_MODE,
			{
				className: 'number',
				variants: [
					{ begin: '\\b(0[bB][01]+)' },
					{ begin: '\\b(0[oO][0-7]+)' },
					{ begin: hljs.C_NUMBER_RE }
				],
				relevance: 0
			},
			{ // "value" container
				begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
				keywords: 'return throw case',
				contains: [
					hljs.C_LINE_COMMENT_MODE,
					hljs.C_BLOCK_COMMENT_MODE,
					hljs.REGEXP_MODE,
					{
						className: 'function',
						begin: '(\\(.*?\\)|' + hljs.IDENT_RE + ')\\s*=>', returnBegin: true,
						end: '\\s*=>',
						contains: [
							{
								className: 'params',
								variants: [
									{
										begin: hljs.IDENT_RE
									},
									{
										begin: /\(\s*\)/,
									},
									{
										begin: /\(/, end: /\)/,
										excludeBegin: true, excludeEnd: true,
										keywords: KEYWORDS,
										contains: [
											'self',
											hljs.C_LINE_COMMENT_MODE,
											hljs.C_BLOCK_COMMENT_MODE
										]
									}
								]
							}
						]
					}
				],
				relevance: 0
			},
			{
				className: 'function',
				begin: 'function', end: /[\{;]/, excludeEnd: true,
				keywords: KEYWORDS,
				contains: [
					'self',
					hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE }),
					PARAMS
				],
				illegal: /%/,
				relevance: 0 // () => {} is more typical in TypeScript
			},
			{
				beginKeywords: 'constructor', end: /\{/, excludeEnd: true,
				contains: [
					'self',
					PARAMS
				]
			},
			{ // prevent references like module.id from being higlighted as module definitions
				begin: /module\./,
				keywords: { built_in: 'module' },
				relevance: 0
			},
			{
				beginKeywords: 'module', end: /\{/, excludeEnd: true
			},
			{
				beginKeywords: 'interface', end: /\{/, excludeEnd: true,
				keywords: 'interface extends'
			},
			{
				begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
			},
			{
				begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
			},
			DECORATOR,
			ARGS
		]
	};
}
);

// #END

// === ms/vbnet.js

/*
Language: VB.NET
Author: Poren Chiang <ren.chiang@gmail.com>
*/

// syntax/ms/vbnet.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('vbnet',
function(hljs) {
	return {
		aliases: ['vb'],
		case_insensitive: true,
		keywords: {
			keyword:
				'addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval ' + /* a-b */
				'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */
				'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */
				'get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue ' + /* g-i */
				'join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass ' + /* j-m */
				'namespace narrowing new next not notinheritable notoverridable ' + /* n */
				'of off on operator option optional or order orelse overloads overridable overrides ' + /* o */
				'paramarray partial preserve private property protected public ' + /* p */
				'raiseevent readonly redim rem removehandler resume return ' + /* r */
				'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */
				'take text then throw to try unicode until using when where while widening with withevents writeonly xor', /* t-x */
			built_in:
				'boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype ' +  /* b-c */
				'date decimal directcast double gettype getxmlnamespace iif integer long object ' + /* d-o */
				'sbyte short single string trycast typeof uinteger ulong ushort', /* s-u */
			literal:
				'true false nothing'
		},
		illegal: '//|{|}|endif|gosub|variant|wend|^\\$ ', /* reserved deprecated keywords */
		contains: [
			hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
			hljs.COMMENT(
				'\'',
				'$',
				{
					returnBegin: true,
					contains: [
						{
							className: 'doctag',
							begin: '\'\'\'|<!--|-->',
							contains: [hljs.PHRASAL_WORDS_MODE]
						},
						{
							className: 'doctag',
							begin: '</?', end: '>',
							contains: [hljs.PHRASAL_WORDS_MODE]
						}
					]
				}
			),
			hljs.C_NUMBER_MODE,
			{
				className: 'meta',
				begin: '#', end: '$',
				keywords: {'meta-keyword': 'if else elseif end region externalsource'}
			}
		]
	};
}
);

// #END

// === ms/vbscript.js

/*
Language: VBScript
Author: Nikita Ledyaev <lenikita@yandex.ru>
Contributors: Michal Gabrukiewicz <mgabru@gmail.com>
Category: scripting
*/

// syntax/ms/vbscript.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('vbscript',
function(hljs) {
	return {
		aliases: ['vbs'],
		case_insensitive: true,
		keywords: {
			keyword:
				'call class const dim do loop erase execute executeglobal exit for each next function ' +
				'if then else on error option explicit new private property let get public randomize ' +
				'redim rem select case set stop sub while wend with end to elseif is or xor and not ' +
				'class_initialize class_terminate default preserve in me byval byref step resume goto',
			built_in:
				'lcase month vartype instrrev ubound setlocale getobject rgb getref string ' +
				'weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency ' +
				'conversions csng timevalue second year space abs clng timeserial fixs len asc ' +
				'isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate ' +
				'instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex ' +
				'chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim ' +
				'strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion ' +
				'scriptengine split scriptengineminorversion cint sin datepart ltrim sqr ' +
				'scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw ' +
				'chrw regexp server response request cstr err',
			literal:
				'true false null nothing empty'
		},
		illegal: '//',
		contains: [
			hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
			hljs.COMMENT(
				/'/,
				/$/,
				{
					relevance: 0
				}
			),
			hljs.C_NUMBER_MODE
		]
	};
}
);

// #END

// === net2/ldif.js

/*
Language: LDIF
Contributors: Jacob Childress <jacobc@gmail.com>
Category: enterprise, config
*/

// syntax/net/ldif.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('ldif',
function(hljs) {
	return {
		contains: [
			{
				className: 'attribute',
				begin: '^dn', end: ': ', excludeEnd: true,
				starts: {end: '$', relevance: 0},
				relevance: 10
			},
			{
				className: 'attribute',
				begin: '^\\w', end: ': ', excludeEnd: true,
				starts: {end: '$', relevance: 0}
			},
			{
				className: 'literal',
				begin: '^-', end: '$'
			},
			hljs.HASH_COMMENT_MODE
		]
	};
}
);

// #END

// === net2/protobuf.js

/*
Language: Protocol Buffers
Author: Dan Tao <daniel.tao@gmail.com>
Description: Protocol buffer message definition format
Category: protocols
*/

// syntax/net/protobuf.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('protobuf',
function(hljs) {
	return {
		keywords: {
			keyword: 'package import option optional required repeated group oneof',
			built_in: 'double float int32 int64 uint32 uint64 sint32 sint64 ' +
				'fixed32 fixed64 sfixed32 sfixed64 bool string bytes',
			literal: 'true false'
		},
		contains: [
			hljs.QUOTE_STRING_MODE,
			hljs.NUMBER_MODE,
			hljs.C_LINE_COMMENT_MODE,
			{
				className: 'class',
				beginKeywords: 'message enum service', end: /\{/,
				illegal: /\n/,
				contains: [
					hljs.inherit(hljs.TITLE_MODE, {
						starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
					})
				]
			},
			{
				className: 'function',
				beginKeywords: 'rpc',
				end: /;/, excludeEnd: true,
				keywords: 'rpc returns'
			},
			{
				begin: /^\s*[A-Z_]+/,
				end: /\s*=/, excludeEnd: true
			}
		]
	};
}
);

// #END

// === hw/armasm.js

/*
Language: ARM Assembly
Author: Dan Panzarella <alsoelp@gmail.com>
Description: ARM Assembly including Thumb and Thumb2 instructions
Category: assembler
*/

// syntax/hw/armasm.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('armasm',
function(hljs) {
		//local labels: %?[FB]?[AT]?\d{1,2}\w+
	return {
		case_insensitive: true,
		aliases: ['arm'],
		lexemes: '\\.?' + hljs.IDENT_RE,
		keywords: {
			meta:
				//GNU preprocs
				'.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '+
				//ARM directives
				'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
			built_in:
				'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 '+ //standard registers
				'pc lr sp ip sl sb fp '+ //typical regs plus backward compatibility
				'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 '+ //more regs and fp
				'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 '+ //coprocessor regs
				'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 '+ //more coproc
				'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 '+ //advanced SIMD NEON regs

				//program status registers
				'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '+
				'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '+

				//NEON and VFP registers
				's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '+
				's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '+
				'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '+
				'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 ' +

				'{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
		},
		contains: [
			{
				className: 'keyword',
				begin: '\\b('+     //mnemonics
						'adc|'+
						'(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'+
						'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'+
						'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'+
						'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'+
						'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'+
						'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'+
						'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'+
						'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'+
						'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'+
						'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'+
						'[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'+
						'wfe|wfi|yield'+
				')'+
				'(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?'+ //condition codes
				'[sptrx]?' ,                                             //legal postfixes
				end: '\\s'
			},
			hljs.COMMENT('[;@]', '$', {relevance: 0}),
			hljs.C_BLOCK_COMMENT_MODE,
			hljs.QUOTE_STRING_MODE,
			{
				className: 'string',
				begin: '\'',
				end: '[^\\\\]\'',
				relevance: 0
			},
			{
				className: 'title',
				begin: '\\|', end: '\\|',
				illegal: '\\n',
				relevance: 0
			},
			{
				className: 'number',
				variants: [
						{begin: '[#$=]?0x[0-9a-f]+'}, //hex
						{begin: '[#$=]?0b[01]+'},     //bin
						{begin: '[#$=]\\d+'},        //literal
						{begin: '\\b\\d+'}           //bare number
				],
				relevance: 0
			},
			{
				className: 'symbol',
				variants: [
						{begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+'}, //ARM syntax
						{begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU ARM syntax
						{begin: '[=#]\\w+' }  //label reference
				],
				relevance: 0
			}
		]
	};
}
);

// #END

// === hw/llvm.js

/*
Language: LLVM IR
Author: Michael Rodler <contact@f0rki.at>
Description: language used as intermediate representation in the LLVM compiler framework
Category: assembler
*/

// syntax/hw/llvm.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('llvm',
function(hljs) {
	var identifier = '([-a-zA-Z$._][\\w\\-$.]*)';
	return {
		//lexemes: '[.%]?' + hljs.IDENT_RE,
		keywords:
			'begin end true false declare define global ' +
			'constant private linker_private internal ' +
			'available_externally linkonce linkonce_odr weak ' +
			'weak_odr appending dllimport dllexport common ' +
			'default hidden protected extern_weak external ' +
			'thread_local zeroinitializer undef null to tail ' +
			'target triple datalayout volatile nuw nsw nnan ' +
			'ninf nsz arcp fast exact inbounds align ' +
			'addrspace section alias module asm sideeffect ' +
			'gc dbg linker_private_weak attributes blockaddress ' +
			'initialexec localdynamic localexec prefix unnamed_addr ' +
			'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +
			'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +
			'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +
			'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +
			'cc c signext zeroext inreg sret nounwind ' +
			'noreturn noalias nocapture byval nest readnone ' +
			'readonly inlinehint noinline alwaysinline optsize ssp ' +
			'sspreq noredzone noimplicitfloat naked builtin cold ' +
			'nobuiltin noduplicate nonlazybind optnone returns_twice ' +
			'sanitize_address sanitize_memory sanitize_thread sspstrong ' +
			'uwtable returned type opaque eq ne slt sgt ' +
			'sle sge ult ugt ule uge oeq one olt ogt ' +
			'ole oge ord uno ueq une x acq_rel acquire ' +
			'alignstack atomic catch cleanup filter inteldialect ' +
			'max min monotonic nand personality release seq_cst ' +
			'singlethread umax umin unordered xchg add fadd ' +
			'sub fsub mul fmul udiv sdiv fdiv urem srem ' +
			'frem shl lshr ashr and or xor icmp fcmp ' +
			'phi call trunc zext sext fptrunc fpext uitofp ' +
			'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +
			'addrspacecast select va_arg ret br switch invoke ' +
			'unwind unreachable indirectbr landingpad resume ' +
			'malloc alloca free load store getelementptr ' +
			'extractelement insertelement shufflevector getresult ' +
			'extractvalue insertvalue atomicrmw cmpxchg fence ' +
			'argmemonly double',
		contains: [
			{
				className: 'keyword',
				begin: 'i\\d+'
			},
			hljs.COMMENT(
				';', '\\n', {relevance: 0}
			),
			// Double quote string
			hljs.QUOTE_STRING_MODE,
			{
				className: 'string',
				variants: [
					// Double-quoted string
					{ begin: '"', end: '[^\\\\]"' },
				],
				relevance: 0
			},
			{
				className: 'title',
				variants: [
					{ begin: '@' + identifier },
					{ begin: '@\\d+' },
					{ begin: '!' + identifier },
					{ begin: '!\\d+' + identifier }
				]
			},
			{
				className: 'symbol',
				variants: [
					{ begin: '%' + identifier },
					{ begin: '%\\d+' },
					{ begin: '#\\d+' },
				]
			},
			{
				className: 'number',
				variants: [
						{ begin: '0[xX][a-fA-F0-9]+' },
						{ begin: '-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?' }
				],
				relevance: 0
			},
		]
	};
}
);

// #END

// === hw/mipsasm.js

/*
Language: MIPS Assembly
Author: Nebuleon Fumika <nebuleon.fumika@gmail.com>
Description: MIPS Assembly (up to MIPS32R2)
Category: assembler
*/

// syntax/hw/mipsasm.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('mipsasm',
function(hljs) {
		//local labels: %?[FB]?[AT]?\d{1,2}\w+
	return {
		case_insensitive: true,
		aliases: ['mips'],
		lexemes: '\\.?' + hljs.IDENT_RE,
		keywords: {
			meta:
				//GNU preprocs
				'.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
			built_in:
				'$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' + // integer registers
				'$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' + // integer registers
				'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' + // integer register aliases
				't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' + // integer register aliases
				'k0 k1 gp sp fp ra ' + // integer register aliases
				'$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' + // floating-point registers
				'$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' + // floating-point registers
				'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' + // Coprocessor 0 registers
				'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' + // Coprocessor 0 registers
				'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' + // Coprocessor 0 registers
				'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
		},
		contains: [
			{
				className: 'keyword',
				begin: '\\b('+     //mnemonics
						// 32-bit integer instructions
						'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|' +
						'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\.hb)?|jr(\.hb)?|lbu?|lhu?|' +
						'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|' +
						'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|' +
						'srlv?|subu?|sw[lr]?|xori?|wsbh|' +
						// floating-point instructions
						'abs\.[sd]|add\.[sd]|alnv.ps|bc1[ft]l?|' +
						'c\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\.[sd]|' +
						'(ceil|floor|round|trunc)\.[lw]\.[sd]|cfc1|cvt\.d\.[lsw]|' +
						'cvt\.l\.[dsw]|cvt\.ps\.s|cvt\.s\.[dlw]|cvt\.s\.p[lu]|cvt\.w\.[dls]|' +
						'div\.[ds]|ldx?c1|luxc1|lwx?c1|madd\.[sd]|mfc1|mov[fntz]?\.[ds]|' +
						'msub\.[sd]|mth?c1|mul\.[ds]|neg\.[ds]|nmadd\.[ds]|nmsub\.[ds]|' +
						'p[lu][lu]\.ps|recip\.fmt|r?sqrt\.[ds]|sdx?c1|sub\.[ds]|suxc1|' +
						'swx?c1|' +
						// system control instructions
						'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|' +
						'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|' +
						'tlti?u?|tnei?|wait|wrpgpr'+
				')',
				end: '\\s'
			},
			hljs.COMMENT('[;#]', '$'),
			hljs.C_BLOCK_COMMENT_MODE,
			hljs.QUOTE_STRING_MODE,
			{
				className: 'string',
				begin: '\'',
				end: '[^\\\\]\'',
				relevance: 0
			},
			{
				className: 'title',
				begin: '\\|', end: '\\|',
				illegal: '\\n',
				relevance: 0
			},
			{
				className: 'number',
				variants: [
						{begin: '0x[0-9a-f]+'}, //hex
						{begin: '\\b-?\\d+'}           //bare number
				],
				relevance: 0
			},
			{
				className: 'symbol',
				variants: [
						{begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU MIPS syntax
						{begin: '^\\s*[0-9]+:'}, // numbered local labels
						{begin: '[0-9]+[bf]' }  // number local label reference (backwards, forwards)
				],
				relevance: 0
			}
		],
		illegal: '\/'
	};
}
);

// #END

// === hw/vhdl.js

/*
Language: VHDL
Author: Igor Kalnitsky <igor@kalnitsky.org>
Contributors: Daniel C.K. Kho <daniel.kho@tauhop.com>, Guillaume Savaton <guillaume.savaton@eseo.fr>
Description: VHDL is a hardware description language used in electronic design automation to describe digital and mixed-signal systems.
*/

// syntax/hw/vhdl.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('vhdl',
function(hljs) {
	// Regular expression for VHDL numeric literals.

	// Decimal literal:
	var INTEGER_RE = '\\d(_|\\d)*';
	var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
	var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
	// Based literal:
	var BASED_INTEGER_RE = '\\w+';
	var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

	var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

	return {
		case_insensitive: true,
		keywords: {
			keyword:
				'abs access after alias all and architecture array assert assume assume_guarantee attribute ' +
				'begin block body buffer bus case component configuration constant context cover disconnect ' +
				'downto default else elsif end entity exit fairness file for force function generate ' +
				'generic group guarded if impure in inertial inout is label library linkage literal ' +
				'loop map mod nand new next nor not null of on open or others out package parameter port ' +
				'postponed procedure process property protected pure range record register reject ' +
				'release rem report restrict restrict_guarantee return rol ror select sequence ' +
				'severity shared signal sla sll sra srl strong subtype then to transport type ' +
				'unaffected units until use variable view vmode vprop vunit wait when while with xnor xor',
			built_in:
				'boolean bit character ' +
				'integer time delay_length natural positive ' +
				'string bit_vector file_open_kind file_open_status ' +
				'std_logic std_logic_vector unsigned signed boolean_vector integer_vector ' +
				'std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed ' +
				'real_vector time_vector',
			literal:
				'false true note warning error failure ' +  // severity_level
				'line text side width'                      // textio
		},
		illegal: '{',
		contains: [
			hljs.C_BLOCK_COMMENT_MODE,      // VHDL-2008 block commenting.
			hljs.COMMENT('--', '$'),
			hljs.QUOTE_STRING_MODE,
			{
				className: 'number',
				begin: NUMBER_RE,
				relevance: 0
			},
			{
				className: 'string',
				begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
				contains: [hljs.BACKSLASH_ESCAPE]
			},
			{
				className: 'symbol',
				begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
				contains: [hljs.BACKSLASH_ESCAPE]
			}
		]
	};
}
);

// #END

// === hw/x86asm.js

/*
Language: Intel x86 Assembly
Author: innocenat <innocenat@gmail.com>
Description: x86 assembly language using Intel's mnemonic and NASM syntax
Category: assembler
*/

// syntax/hw/x86asm.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('x86asm',
function(hljs) {
	return {
		case_insensitive: true,
		lexemes: '[.%]?' + hljs.IDENT_RE,
		keywords: {
			keyword:
				'lock rep repe repz repne repnz xaquire xrelease bnd nobnd ' +
				'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
			built_in:
				// Instruction pointer
				'ip eip rip ' +
				// 8-bit registers
				'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ' +
				// 16-bit registers
				'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w ' +
				// 32-bit registers
				'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d ' +
				// 64-bit registers
				'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 ' +
				// Segment registers
				'cs ds es fs gs ss ' +
				// Floating point stack registers
				'st st0 st1 st2 st3 st4 st5 st6 st7 ' +
				// MMX Registers
				'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 ' +
				// SSE registers
				'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 ' +
				'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ' +
				// AVX registers
				'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ' +
				'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 ' +
				// AVX-512F registers
				'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 ' +
				'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 ' +
				// AVX-512F mask registers
				'k0 k1 k2 k3 k4 k5 k6 k7 ' +
				// Bound (MPX) register
				'bnd0 bnd1 bnd2 bnd3 ' +
				// Special register
				'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 ' +
				// NASM altreg package
				'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b ' +
				'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d ' +
				'r0h r1h r2h r3h ' +
				'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l ' +

				'db dw dd dq dt ddq do dy dz ' +
				'resb resw resd resq rest resdq reso resy resz ' +
				'incbin equ times ' +
				'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',

			meta:
				'%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif ' +
				'%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep ' +
				'%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment ' +
				'.nolist ' +
				'__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ ' +
				'__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend ' +
				'align alignb sectalign daz nodaz up down zero default option assume public ' +

				'bits use16 use32 use64 default section segment absolute extern global common cpu float ' +
				'__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ ' +
				'__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ ' +
				'__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e ' +
				'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
		},
		contains: [
			hljs.COMMENT(
				';',
				'$',
				{
					relevance: 0
				}
			),
			{
				className: 'number',
				variants: [
					// Float number and x87 BCD
					{
						begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|' +
									 '(0[Xx])?[0-9][0-9_]*\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
						relevance: 0
					},

					// Hex number in $
					{ begin: '\\$[0-9][0-9A-Fa-f]*', relevance: 0 },

					// Number in H,D,T,Q,O,B,Y suffix
					{ begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },

					// Number in X,D,T,Q,O,B,Y prefix
					{ begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b'}
				]
			},
			// Double quote string
			hljs.QUOTE_STRING_MODE,
			{
				className: 'string',
				variants: [
					// Single-quoted string
					{ begin: '\'', end: '[^\\\\]\'' },
					// Backquoted string
					{ begin: '`', end: '[^\\\\]`' }
				],
				relevance: 0
			},
			{
				className: 'symbol',
				variants: [
					// Global label and local label
					{ begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
					// Macro-local label
					{ begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }
				],
				relevance: 0
			},
			// Macro parameter
			{
				className: 'subst',
				begin: '%[0-9]+',
				relevance: 0
			},
			// Macro parameter
			{
				className: 'subst',
				begin: '%!\S+',
				relevance: 0
			},
			{
				className: 'meta',
				begin: /^\s*\.[\w_-]+/
			}
		]
	};
}
);

// #END

// ===== [#]

// # JS Package: syntax-ext.pak.js :: #END#

